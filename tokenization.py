from transformers import BertTokenizerFast, BertModel
import torch
import re
from collections import defaultdict
import random
import unidecode

TOKENIZER = BertTokenizerFast.from_pretrained("bert-base-multilingual-cased") #("bert-base-uncased")

BERT_MODEL = BertModel.from_pretrained("bert-base-multilingual-cased", output_hidden_states=True)

# BIG_VAR_EMBS = -torch.ones((2000, 768)) * (torch.tensor(range(1, 2001)))[:, None]

LAMBDA = [-3.3135e+00, -2.7586e+00, -3.6889e-01, -3.7267e+00,  3.3720e+00,
         8.9147e-01,  2.3475e+00, -2.5278e+00, -4.6680e-01, -4.7528e+00,
        -1.0770e+00,  2.9502e+00,  1.5172e+00, -1.8565e+00, -2.3205e-01,
         6.8677e-01,  3.2492e+00,  8.4883e-01,  6.5826e-01,  2.3877e+00,
         1.5019e+00,  1.7078e-01, -3.1180e+00,  2.8585e-01,  8.9036e-01,
         2.2260e+00,  2.4465e+00,  4.2735e+00, -4.2122e+00,  4.4266e+00,
         3.1142e+00,  2.1118e-01,  1.8732e+00,  1.0721e+00, -3.0133e+00,
         1.2542e-01,  2.1987e+00,  9.9317e-02, -2.5550e+00,  2.1955e+00,
         5.9998e-01, -4.2951e+00,  7.1179e-01, -2.9205e+00,  5.7692e-01,
         7.0469e-01,  1.8296e+00,  8.5169e-01, -3.3169e+00, -3.3497e+00,
        -7.3086e+00, -6.8566e-01, -3.3478e+00,  1.3948e+00, -1.4006e-01,
        -3.1756e+00,  9.0615e-01, -1.5308e+00, -2.2150e+00, -2.9371e+00,
        -1.1899e+00, -1.9889e+00,  2.4214e+00,  1.2941e+00,  8.1149e-01,
         1.0494e+00,  2.4698e+00, -1.1647e+00, -5.7892e+00,  3.1916e+00,
        -2.1611e+00,  3.0804e+00,  2.5953e+00,  3.1845e-01,  2.1278e+00,
         1.7139e+00,  6.5423e-01,  2.0100e+00,  1.4426e+00, -2.0651e+00,
         1.8783e+00,  3.7932e+00,  3.6327e+00,  1.6342e+00,  6.0972e-02,
         1.3107e+00, -2.9254e-01, -9.0741e-01, -1.0057e+00, -5.6712e-01,
        -2.3282e+00,  3.9747e-01, -3.1881e+00, -1.0846e+00,  1.8105e-01,
        -1.3181e+00, -3.8823e+00, -2.1056e-01, -5.7616e-02, -5.0431e+00,
        -2.6774e+00, -3.2328e+00,  3.4712e+00,  1.5128e+00, -3.1794e+00,
        -3.7099e-01, -3.2249e+00, -1.3762e+00, -5.7126e-02,  1.0611e+00,
        -1.2332e+00,  3.9637e+00,  1.8836e+00, -3.2353e-01, -2.2623e+00,
         4.8379e+00, -1.8501e+00, -1.5714e+00, -5.4840e-01,  5.1024e-01,
        -3.5155e-01, -2.5558e-01, -6.7164e-01,  2.1328e+00, -1.1403e+00,
        -2.1551e-01, -1.3572e+00, -9.0263e-01, -9.0670e-01, -5.1495e-01,
        -1.3668e-01,  2.3971e+00,  6.7695e-01,  9.7914e-01, -3.1027e+00,
        -2.7494e+00, -2.3876e+00, -2.7223e+00,  1.2180e+00, -3.8373e+00,
        -3.6043e-01,  2.7373e+00,  1.6424e+00, -4.2736e+00,  1.3567e+00,
        -8.1596e-01, -1.6842e+00, -1.6346e+00, -2.1938e-01, -2.0256e+00,
        -2.0207e+00,  2.6539e+00, -3.8748e-01, -2.1815e+00,  2.9348e-01,
        -6.7919e-01,  1.8233e-02,  2.5751e+00, -1.6672e+00,  3.2755e+00,
         4.0157e+00,  1.8416e+00,  6.1887e-01,  1.4130e-01,  5.6046e-01,
        -8.3224e-02,  2.1938e+00,  5.3669e+00, -2.2245e+00,  1.0204e+00,
        -2.7466e+00, -3.0379e+00,  4.3921e+00, -2.3160e+00, -4.1867e+00,
        -4.1303e-01,  2.3688e+00, -2.0843e+00,  4.3019e-01, -1.0586e+00,
        -1.6397e+00,  3.1751e-01, -2.5750e+00, -5.7433e+00,  5.3298e+00,
        -6.6908e-02,  3.2317e+00, -4.8599e+00,  4.3985e+00,  1.5649e+00,
        -2.8616e+00, -2.3253e+00, -1.2751e+00, -1.7033e+00,  1.2773e-01,
        -1.2860e+00,  1.1555e+00, -1.2353e+00,  1.4372e+00, -4.1583e-01,
         1.1137e+00,  1.2843e+00,  3.2876e-01,  1.1938e-02,  1.2445e+00,
         7.5473e-01,  2.6764e+00, -7.5150e-01, -1.6330e+00, -6.4558e-01,
        -1.9505e+00,  3.5371e+00, -4.6894e-01,  1.0590e+00,  2.4523e+00,
        -3.2503e+00,  1.6509e+00,  6.3387e-01, -2.8172e-01,  5.5682e-01,
         6.4716e-01, -4.5624e+00,  1.0307e+00,  1.9889e+00, -2.9133e+00,
         2.5735e+00,  3.7944e+00, -1.7040e+00,  2.4851e+00, -3.3799e+00,
        -7.1099e-01, -2.1800e+00, -1.2324e+00,  2.0857e+00, -4.9846e+00,
         6.1239e+00,  1.7388e+00, -2.0179e+00, -5.4812e-02, -1.2018e+00,
         2.7741e-03,  5.2229e-02,  2.6430e+00,  9.0932e-01, -1.3388e+00,
         6.2962e-01,  3.3737e+00, -2.8421e+00,  8.2524e-01,  6.2403e-01,
        -1.4764e+00, -6.0667e+00,  5.2454e-01,  5.6433e-01, -3.0463e-01,
        -4.7386e+00,  3.0809e+00, -3.3186e+00,  3.7477e+00,  3.1179e-01,
        -6.6792e-01, -7.0630e-01,  5.8900e+00, -4.2758e+00, -3.8875e-01,
         1.9103e+00,  1.7846e+00,  2.0741e-01,  7.8334e-01, -3.1455e+00,
        -3.3192e+00,  8.8402e-01, -3.0739e+00,  3.5844e-01, -3.1313e+00,
        -2.9457e+00,  3.5284e+00, -1.4172e+00, -1.6506e+00,  1.1599e+00,
         1.8039e+00, -2.6333e+00, -2.0823e+00, -9.0513e-01,  1.1016e+00,
        -2.8493e+00, -4.4306e+00, -7.1420e+00,  3.2037e-01, -3.3057e+00,
        -5.6570e-01,  4.2227e+00,  2.4256e+00, -4.2043e+00,  2.5048e+00,
         1.4394e+00, -2.0516e+00, -4.4857e-01, -1.1194e+00, -2.3096e+00,
        -3.9147e+00,  2.7798e+00,  1.0817e+00, -1.1964e+00,  1.3691e+00,
         4.2813e+00, -2.4028e+00,  3.7370e+00, -2.6184e+01, -6.7294e-02,
        -1.6096e+00, -2.9655e+00,  2.5904e+00,  4.8800e-01, -2.6602e+00,
         1.7182e+00, -8.7960e-01, -2.0941e+00,  5.6633e-01, -2.3083e+00,
        -2.6027e-01,  1.3904e+00,  9.6869e-01, -1.4293e+00,  3.7773e+00,
        -1.1938e+00, -8.4304e-01,  7.6389e+00, -2.9389e+00, -1.0067e+00,
         5.7023e+00,  7.6335e-01, -2.6566e+00, -4.8692e-02,  2.8855e+00,
         6.9106e-01, -4.6193e+00, -1.7560e+00, -2.9351e+00, -7.3184e-01,
        -8.4640e-01,  2.0984e+00,  1.4767e+00,  2.1162e+00,  2.9690e+00,
        -1.6619e+00,  5.1061e+00,  2.4482e+00,  1.9225e+00,  3.2702e+00,
        -1.3703e+00,  2.6375e+00,  6.3780e-01, -3.1983e+00,  3.0019e+00,
         2.2784e+00, -3.1191e-01,  5.1687e-02,  1.6991e+00,  9.3549e-01,
         9.8553e-02, -2.9478e+00,  1.1944e+00,  8.4290e-01, -7.7147e-01,
         1.2980e+00, -2.0717e+00, -5.7824e-01,  4.4750e+00, -1.4466e+00,
        -1.0605e+00,  6.0589e+00, -5.4886e+00,  2.7229e-01, -4.5031e+00,
        -5.8624e-01,  2.3225e+00, -1.4056e+00, -2.1504e-01, -2.4424e+00,
         3.2497e+00, -8.1334e+00, -6.2590e-01,  5.5696e-01, -4.8258e+00,
        -1.1730e-01,  1.9744e+00, -3.4267e+00,  1.3859e+00, -1.7556e+00,
        -1.1497e+00,  1.2288e+00,  1.3327e+00,  2.2444e+00,  4.7527e-01,
        -2.6762e+00, -1.8340e+00, -4.1191e-01, -2.0536e+00, -4.5965e-01,
         1.3303e+00,  1.6991e+00,  1.2802e+00, -2.3453e-01,  2.7563e+00,
        -1.5400e+00,  1.4303e+00,  2.4629e+00, -2.5018e+00, -1.7655e+00,
        -2.0716e+00,  3.3955e+00, -5.7036e-01, -1.8479e-01, -4.6444e+00,
         2.6608e+00, -1.4472e-01, -9.5336e-01,  2.7766e+00,  3.5584e-01,
         2.7575e+00,  1.1634e-01, -1.0449e+00, -8.0447e-01, -3.3874e-01,
        -1.9600e+00, -9.5284e-01,  3.6151e-02, -4.6078e+00,  1.8852e+00,
        -2.5373e+00, -9.1922e-01, -2.4230e+00,  1.2126e-01,  1.0512e+00,
        -3.6575e+00, -4.5906e+00,  3.5362e+00,  4.1398e-01, -3.8761e-02,
         2.7149e+00, -9.9391e-01, -4.0967e+00, -1.0162e+00, -2.0946e+00,
        -1.8470e+00, -7.0160e-01,  4.0804e+00,  3.6075e+00,  3.9183e-01,
        -1.5675e+00,  7.2158e-01,  2.8535e+00, -2.4977e-02,  4.1625e-01,
         1.9402e+00, -1.3949e+00,  5.9175e+00,  3.3740e+00, -2.6847e+00,
         3.4491e+00,  1.4475e+00, -2.8580e+00,  1.8266e+00, -8.3584e-02,
        -2.8492e+00,  1.5923e+00, -3.6305e+00,  2.5283e+00,  6.3843e-01,
         2.8111e+00,  8.8712e-02,  3.4710e+00,  3.5513e+00, -3.0167e+00,
         1.2969e+00, -8.2174e-01, -1.5517e+00,  4.0462e+00, -6.8676e-02,
         4.5384e-01,  3.7121e+00,  1.1209e+00, -2.3013e+00,  2.0804e+00,
        -5.2170e+00, -2.4825e+00,  1.5862e+00,  2.5573e+00,  2.5523e+00,
        -9.8962e-01, -8.5888e-01,  5.9046e-01,  1.0379e+00, -4.7854e+00,
        -4.3483e-01, -2.1167e-01,  3.6117e+00,  5.9636e-01, -3.5200e+00,
         1.3937e-01,  3.5062e-01, -9.8724e-01, -2.7051e-02,  2.7355e-01,
         3.4469e+00,  1.1308e+00,  1.7603e+00, -3.2232e+00, -8.0583e-01,
         1.2998e+00,  1.7400e-01, -1.4148e+00, -8.8007e-01,  1.5785e+00,
         3.8238e+00, -1.1245e+00, -1.6598e+00,  3.1723e+00, -1.3923e+00,
        -3.9705e-01, -2.7059e+00, -3.8049e+00,  4.1184e+00,  9.3736e-01,
        -1.9206e-01,  7.5266e-01, -6.1760e+00, -2.4342e+00, -3.2933e+00,
         1.7069e+00, -2.5233e+00,  1.2992e+00,  2.3805e+00, -3.0487e+00,
        -5.1008e+00,  2.7940e-01, -2.2093e-02, -1.6386e+00, -1.1237e+00,
        -1.2678e+00,  4.7244e-01,  3.2316e+00, -2.8693e+00, -5.5920e+00,
         2.7556e+00, -1.7640e+00, -1.4405e+00, -3.3584e-02, -3.8393e+00,
        -3.4522e+00,  3.6886e-01,  1.1239e+00,  6.2688e-01,  3.2945e-01,
         2.5892e-01,  6.4228e+00,  6.3221e+00, -4.5156e+00, -2.7281e+00,
        -9.1761e-01, -1.2566e+00,  3.2518e-01, -4.4484e+00,  1.2588e+00,
         5.9508e-01,  2.7892e-01,  1.7514e+00, -1.1102e+00,  3.6241e+00,
        -3.8306e-01,  1.5152e+00, -2.5707e+00,  1.2876e+00,  1.9059e+00,
         2.7567e+00,  3.1745e+00, -1.1340e-01, -6.2290e-01,  8.3767e-01,
         3.9998e-01,  2.4515e+00, -7.5721e-01, -1.1941e-01,  2.6214e+00,
        -1.5989e+00, -1.6428e-01,  1.0623e+00, -1.6508e+00,  4.4860e+00,
         1.4736e+00,  2.0480e-01,  2.5109e+00, -5.3497e-01, -1.3645e+00,
        -1.7797e+00,  3.5331e-01, -3.5680e+00,  1.8331e-01,  5.6777e-01,
        -2.9322e+00,  3.2359e+00,  3.1235e+00,  2.1699e+00, -2.3621e+00,
         3.0739e-01, -4.8564e+00, -2.6603e-01, -1.4907e+00,  7.3974e-01,
        -2.4895e+00, -5.7964e-01, -1.6662e+00,  3.1351e+00,  2.1481e+00,
         3.3474e+00,  1.0741e-01,  4.0312e+00, -1.4088e+00, -8.5506e-01,
        -2.2909e+00,  3.4207e+00, -3.9149e-01,  3.2170e-02, -1.2453e+00,
        -3.5334e+00,  2.6726e+00,  1.6469e+00, -8.1121e-01,  2.0912e+00,
         3.1388e+00,  1.7429e+00,  4.4104e+00, -1.1352e+00, -3.8583e+00,
        -5.2907e-01,  2.5554e-01,  3.1201e+00,  3.0946e+00, -4.5495e+00,
         1.1542e+00,  3.7441e+00,  1.3572e+00, -9.0323e-01,  3.4431e+00,
        -8.1582e-01, -3.2206e+00, -1.4905e+00, -3.8101e-01,  1.5171e+00,
         3.8524e-01, -2.6928e-02, -1.8746e+00, -2.0259e+00, -2.7127e+00,
        -3.3234e+00, -2.8643e+00,  5.3517e+00,  2.1286e+00, -1.3188e+00,
        -2.0497e+00,  3.6086e-01, -3.9129e-02, -5.2416e+00, -2.8535e+00,
         8.8734e-02, -2.5806e+00,  1.0068e-01,  2.7651e+00,  1.8681e+00,
         2.8915e+00,  1.3750e+00, -3.9307e-01, -4.0072e-01,  9.9097e-01,
        -1.3385e+00, -9.0931e-01, -4.9930e+00,  1.0940e+00,  2.3923e-01,
        -4.5788e-01,  2.4257e+00,  1.6875e+00, -2.4681e-01, -1.0035e+00,
         2.6910e+00, -4.5623e+00, -2.1969e+00,  5.3974e-01,  3.6894e-01,
         6.3868e-01,  2.0471e+00,  7.4379e+00, -4.1731e+00,  1.8261e+00,
         1.0422e+00,  1.3115e+00,  8.8956e-01,  2.2040e+00, -1.5828e+00,
        -1.0082e+00, -2.3505e+00,  3.1208e+00, -1.0809e-01,  7.4070e-01,
        -1.8415e-01,  3.5365e+00,  3.6353e-01,  8.6545e-01, -3.0903e-01,
        -5.4256e-01, -1.1284e+00, -4.1550e+00, -2.6998e-01, -6.8867e-01,
         4.1615e+00, -2.2660e+00, -5.4239e+00,  2.9983e+00,  1.3021e+00,
        -1.3561e+00,  2.0938e+00, -9.9152e-01, -1.2103e+00,  4.4951e-01,
        -1.8396e+00,  1.3715e+00, -1.0615e+00,  1.4246e-01, -2.0520e+00,
         5.9700e-02,  2.3642e+00, -1.6028e+00, -3.2759e+00, -4.5145e+00,
        -3.2357e-01, -6.2740e-01,  4.4916e+00,  1.5595e+00,  3.9803e+00,
        -2.8854e-01,  2.9452e+00, -8.5055e-01, -2.1731e+00,  9.3187e-01,
        -2.4485e+00,  6.5658e-01, -6.5460e-01,  1.2841e+00,  6.4110e+00,
        -4.0646e+00, -5.6506e+00,  9.3220e-01,  1.0059e-01, -2.4745e+00,
         5.1543e-01, -2.2713e+00, -5.4883e-01,  9.4346e-01, -1.8255e+00,
         3.4565e-01,  5.2624e-01,  7.6441e-01,  5.5507e-01,  8.3721e-01,
        -1.3733e+00,  5.3714e-01,  8.8101e-01]
LAMBDA_MULTILINGUAL = [-2.6304e+00,  5.8553e-01,  4.2383e+00, -3.4630e+00, -5.1004e+00,
         6.3341e-01, -2.0096e+00,  1.1209e+00, -2.3989e-01,  1.1458e-01,
         4.7617e+00, -2.2899e+00,  1.6616e+00, -6.6674e-01,  1.3851e+00,
        -1.3476e+00, -2.2511e+00,  3.2786e+00,  1.3819e+00, -3.1119e-01,
        -1.4404e+00,  2.5902e+00, -1.0992e-01, -2.1939e+00,  4.8159e-01,
         5.3910e-01, -2.2235e+00, -4.9254e-01, -2.1145e+00,  4.9379e+00,
         2.3013e+00, -2.5077e+00,  1.5035e+00, -7.5279e-01, -4.0103e+00,
         2.4160e+00, -1.2008e-01,  1.2497e+00,  2.1221e+00, -1.1709e+00,
         1.3932e+00,  1.2889e+00, -1.3599e+00, -1.4674e+00,  2.9597e+00,
         7.1279e-02,  8.7131e-01,  1.6459e+00, -2.0350e+00, -6.7444e-01,
         8.8351e-01,  2.7738e-01, -3.3228e+00,  1.4458e+00, -5.0192e+00,
        -1.2647e+00,  1.8278e+00, -1.5492e+00,  7.4723e+00,  3.3353e+00,
         6.2944e+00, -2.7082e+00, -4.4428e+00, -5.6357e+00, -1.7148e+00,
        -8.7192e-01,  3.8418e-01, -1.0056e+00, -1.9293e+00,  1.3489e+00,
         4.1189e+00, -2.0294e-01,  1.5311e+00,  1.1129e+00,  4.8911e-01,
         2.1947e+00, -1.7790e-01,  5.0894e-01, -8.7900e-04, -1.2545e+00,
        -5.0622e+00,  8.1924e-01,  2.2015e-01, -3.6349e-01, -2.8150e+00,
        -3.2370e+00, -1.8965e+00, -2.9517e+00,  2.2401e+00, -3.6596e+00,
         4.6583e+00, -3.1973e-02, -2.6777e+00,  1.2527e+00, -3.6157e+00,
         2.0220e+00, -1.5654e+00,  1.7174e+00,  2.9947e+00,  2.9291e-02,
        -5.5305e+00,  4.6960e+00,  3.0848e+00, -8.8018e-01,  1.4134e+00,
         2.1461e+00,  1.5521e+00,  1.1486e+00, -2.4836e+00, -6.5363e-01,
        -9.6428e-02,  5.2636e+00,  1.5734e+00,  2.2487e-01, -7.3711e-01,
        -1.3840e+00, -4.3214e+00, -3.5064e+00, -6.1549e-01, -2.0905e+00,
        -2.3980e+00, -4.2237e+00,  1.9529e+00, -4.2555e+00,  1.9188e+00,
         2.6217e-01,  6.1447e-01, -3.4493e+00,  2.1216e+00,  6.4710e+00,
         5.1707e-01, -1.2898e+00, -9.9293e-01, -5.4758e+00,  3.0830e-01,
        -5.5106e+00,  3.2464e+00,  2.4842e+00,  4.9168e-01, -1.2977e+00,
         1.2266e+00, -2.0854e+00, -2.3960e+00, -3.9344e+00,  1.2229e+00,
         2.1299e-01, -2.4379e+00,  1.6583e+00, -2.6859e+00, -2.3576e+00,
        -3.2730e+00, -3.4448e+00,  1.6115e+00, -8.4815e-01, -5.3631e+00,
         4.4758e+00,  2.8669e-01, -3.4468e+00, -4.9482e+00,  1.9106e+00,
        -3.4591e-01, -7.0686e-01,  5.3530e+00,  5.8982e+00, -7.6783e-01,
        -1.6525e+00, -4.8425e+00, -4.3066e+00,  8.6672e-01,  2.3971e+00,
        -1.8865e-01, -1.2721e+00,  3.7373e+00, -4.7326e+00, -1.4039e+00,
        -4.1925e+00, -8.2821e-01, -1.2532e+00,  1.7247e+00,  1.1408e+00,
        -7.5480e-01,  1.9487e+00,  6.8429e-01,  2.8502e-01,  2.8105e+00,
         3.0519e+00,  3.3913e-01, -3.0240e+00, -4.9759e+00,  1.9068e+00,
        -3.3563e+00,  4.7786e+00,  9.8700e-01, -9.2929e-02, -4.3537e+00,
        -2.9985e+00, -3.0139e+00,  1.1850e-01, -2.9675e+00,  1.5395e+00,
         1.8597e-01,  2.1579e+00, -1.5089e+00, -1.8612e+00, -3.1084e+00,
         4.4427e+00, -5.9710e-01, -2.4320e+00,  7.2266e+00,  4.5850e+00,
         1.4668e+00,  3.8286e-01,  6.8711e+00,  2.9328e-02, -1.8343e+00,
        -2.5178e-01,  1.4380e+00,  5.2442e-01,  3.8221e+00,  2.5325e+00,
        -4.0257e+00,  4.8062e-01, -1.7906e+00,  3.1701e+00,  5.5953e-01,
        -4.5800e+00, -1.0107e+00, -5.3004e+01,  5.0215e+00, -7.0177e-02,
        -1.1069e+00,  3.3002e+00,  3.4119e+00,  6.9034e-01, -3.6637e+00,
        -2.7965e+00, -2.4842e+00, -6.4913e+00, -3.4684e+00,  3.2895e+00,
        -2.7594e-01,  1.3630e+00,  3.6116e-01,  1.4808e+00,  1.0337e+00,
         2.1944e+00, -1.8127e+00, -1.2333e+00,  4.1512e+00, -6.1866e+00,
        -2.8096e+00,  5.0575e+00,  7.8988e-01,  3.9385e+00, -7.9786e+00,
         4.7474e+00,  1.7942e+00,  5.1108e-01,  3.2643e+00, -1.0418e+00,
         2.3389e+00, -1.1674e+00, -9.1750e-01,  4.5326e+00, -1.6508e+00,
        -7.2984e+00,  2.5786e+00,  2.2479e+00, -3.1769e+00, -5.1769e+00,
         6.0313e-01, -1.2127e+00, -1.8422e+00,  1.1363e-01, -8.3989e-01,
        -2.0878e+00,  3.5117e+00,  3.4071e+00,  3.4860e+00,  4.7875e+00,
         3.2792e+00, -1.0535e+00, -1.2829e+00,  1.6119e+00, -6.5223e-02,
         1.0320e+00,  4.0880e+00,  7.6579e-01, -3.2985e-01, -4.7604e+00,
         3.8731e+00, -2.2612e+00,  9.7169e-01,  1.1035e+00,  1.2814e+00,
        -2.1121e-01, -2.6743e+00, -2.1232e+00,  2.6058e-03, -8.5434e-01,
         3.2807e+00, -1.5390e-02, -6.0215e-01,  2.5819e+00, -4.4082e+00,
        -5.3595e-01, -2.4486e+00,  4.8620e-01,  3.4504e+00,  6.2409e-01,
         1.6558e+00,  4.6598e-01,  3.1291e-01, -1.6727e+00, -1.8945e+00,
        -4.0946e-01, -3.2828e-01,  1.6823e+00, -3.8159e+00,  2.4859e+00,
        -4.9612e-01,  1.7004e+00, -1.5142e+00,  1.5569e+00, -1.4860e+00,
        -4.9802e+00, -5.6972e-01,  7.5231e-01, -3.9126e-01,  2.8328e+00,
         6.4395e+00, -6.4713e+00, -1.8819e+00, -4.7563e-01, -2.1159e+00,
         2.4289e+00, -9.3206e+00,  3.3543e+00,  2.8531e+00, -2.6442e+00,
        -2.0223e+00, -1.1564e+00, -8.5098e+00, -3.3541e+00, -1.1539e+00,
        -3.1415e-01, -1.7513e+00, -3.3560e+00, -2.9019e+00, -1.5987e-01,
         4.1092e+00,  4.7476e+00, -2.5868e+00,  3.3820e-01, -1.2526e+00,
         5.5355e+00,  1.3632e+00,  1.0580e+00, -1.9916e+00,  3.1141e+00,
        -8.9612e-01,  1.2432e+00, -1.7212e-01, -1.6473e+00, -7.0558e-01,
        -4.6098e+00, -4.5804e+00, -5.3491e-02,  1.4211e+00,  2.0279e+00,
         2.8374e+00,  1.8768e+00, -3.0465e+00, -1.0965e+01, -9.1565e+00,
        -2.1516e+00,  1.1187e+00, -2.0539e+00,  1.3301e+00, -6.8207e-01,
         1.5955e-01, -3.5523e+00, -2.1476e+00,  2.7979e+00,  1.3308e+00,
        -2.7425e+00, -1.8624e-01, -9.6350e-01, -3.5649e+00, -3.9333e+00,
        -1.3797e+00, -7.6642e-01,  7.2039e-01,  1.8948e+00, -4.7874e+00,
        -7.3401e+00,  6.6739e-02,  2.7710e+00, -2.5959e+00, -2.3078e+00,
         3.6087e-01, -4.5792e+00, -5.3897e+00,  3.1027e+00, -1.9758e+00,
        -4.7462e+00, -2.0410e+00,  3.3952e+00,  1.4993e+00, -1.6912e+00,
         1.2915e+00, -2.9058e+00,  3.1870e+00, -1.9014e+00,  3.0513e+00,
         3.9834e-01,  1.4793e+00,  5.6857e-01, -3.1595e+00, -1.9092e+00,
         1.5947e+00, -1.4467e+00, -8.8334e-01,  1.1780e+00,  1.7156e+00,
        -2.9114e+00, -3.1248e-01,  5.2774e-01,  6.0106e-01, -1.5056e+00,
         1.3028e+00,  1.6435e+00,  3.3644e+00, -4.0456e-01, -1.8504e+00,
         1.7917e+00,  2.3805e+00,  5.1944e+00,  4.7302e+00,  5.3335e-01,
         1.6221e+00,  2.5387e+00, -9.2216e-01, -1.2070e+00, -3.6177e+00,
        -3.5833e+00,  6.2677e-01, -2.2786e-01,  5.2000e-02, -2.4598e-01,
         1.2254e+00, -3.2074e+00, -1.9688e-01,  1.6122e+00,  3.9369e+00,
         2.8085e-01,  4.1969e+00,  4.0577e+00,  5.8267e-01,  4.5089e+00,
         1.9670e+00, -6.1772e-02, -6.1412e-01,  5.3538e+00,  7.3807e-02,
        -5.5286e-01,  1.0705e-01, -2.2559e+00,  3.6775e-01,  3.6145e+00,
        -5.7674e-01,  9.1207e-01,  2.2614e+00,  1.7927e+00, -5.8831e+00,
         5.3527e+00,  4.1956e+00,  3.5586e+00,  4.4005e+00, -1.8130e+00,
         3.7013e+00, -6.3290e-01, -2.8534e+00, -3.0801e+00,  2.2505e+00,
        -1.0532e+00,  8.2494e-01,  1.6108e-01, -1.7387e+00, -1.3139e-02,
         1.4032e+00,  8.1446e-01,  2.4230e+00,  8.6040e-01, -8.7089e-01,
        -1.7102e+00, -1.2329e+00, -3.0703e-01,  8.6618e-01,  3.0276e+00,
        -3.1449e+00,  1.1530e+00,  2.0710e+00,  8.0848e-01,  1.2114e+00,
        -3.6556e+00, -1.3704e+00, -6.7416e-01, -2.9845e+00, -3.5385e-01,
        -2.1189e+00, -1.1550e+00,  1.7725e+00, -1.1554e+00, -4.5283e+00,
        -3.8759e+00, -2.2433e+00, -9.7391e-01, -1.2342e+00,  1.3908e+00,
        -3.0293e+00,  3.1462e+00, -2.1379e-01, -5.4295e+00, -2.7278e+00,
        -1.7064e+00, -6.2400e-01,  1.3067e+00, -4.4684e-02, -5.3280e-01,
        -6.9179e+00, -1.2569e-03,  1.8521e-01, -2.9432e+00,  7.2518e-01,
        -4.6344e+00, -9.4325e-01,  5.0336e+00, -5.5334e+00,  1.2439e+00,
        -1.5337e+00, -3.1573e+00,  3.6156e+00, -1.0019e+00,  1.4920e+00,
        -5.3753e-01, -1.0901e+00,  1.6810e+00,  9.9958e-01,  2.3811e+00,
         2.4446e+00,  7.8555e-01,  2.3613e+00,  2.3882e+00, -1.3211e+00,
         1.1913e+00,  4.5629e+00,  4.0250e+00,  2.2942e+00, -7.6119e-01,
        -2.0077e+00,  5.9140e-01, -2.9190e+00, -3.7328e-01, -4.9392e+00,
        -3.1528e+00, -6.6327e-01,  5.0410e+00,  4.3486e+00, -1.5305e-03,
         2.8980e+00,  1.6659e+00,  3.6964e-01,  3.8200e+00, -3.8220e+00,
        -2.6070e-02, -1.8648e+00, -8.8013e-01, -1.7012e+00,  3.2545e-01,
        -1.5859e+00, -5.0890e+00, -2.4773e-01, -3.8765e-03,  4.1961e+00,
         6.0493e+00, -9.3189e-01, -1.0732e+00, -8.9538e-01, -4.9977e+00,
        -8.0304e+00, -3.0448e+00,  2.0015e+00,  1.0997e+00,  1.9823e+00,
         1.1717e+00,  4.4539e+00, -9.5288e-01,  5.0778e-01, -2.3670e+00,
         8.1913e-01, -4.2738e+00,  2.5672e+00, -9.2375e-01,  1.7428e+00,
         1.6716e+00, -9.4157e-03, -3.1464e+00, -5.2696e+00,  1.8282e+00,
         6.8378e-01,  4.3439e+00, -9.5906e-01,  7.1741e-01,  5.3917e+00,
        -1.5747e+00, -2.8293e+00, -4.3204e+00, -8.7100e-01,  1.3254e+00,
         3.4869e-01,  6.2785e-01, -2.0483e+00, -3.9009e+00, -4.1285e+00,
        -9.4976e-01, -2.7554e+00, -4.9191e+00, -6.3369e+00, -4.6623e+00,
        -5.0636e+00,  2.2698e+00,  1.7947e+00, -4.2114e+00,  1.6704e+00,
        -4.0769e+00, -3.7394e+00, -1.3162e+00,  6.2820e-01, -4.4382e+00,
        -2.7684e-01, -4.0656e+00, -4.1300e+00,  7.7313e-01,  1.0999e+00,
        -2.2136e+00, -2.4236e+00,  1.4705e+00, -2.2562e+00,  2.0336e+00,
         6.5372e-01, -1.0400e+00, -2.4746e-01, -6.0266e-01, -1.5084e+00,
         5.3247e-01,  6.3253e-01, -7.0139e-01,  4.0353e-01, -1.9313e+00,
         2.1903e+00,  2.5985e-01,  2.9475e-01, -5.8678e-01, -5.9343e-01,
         1.1148e+00,  3.9563e+00,  5.0398e-01,  4.3426e+00,  1.3378e+00,
         8.3086e-01, -3.7495e+00,  3.5566e+00,  2.0209e+00,  2.0348e+00,
         3.9197e+00, -2.8507e+00, -3.6918e-01,  6.1454e-01,  9.4916e-01,
        -3.4873e-01,  4.1808e+00,  1.7678e+00,  6.9889e-01,  2.1618e+00,
        -7.5843e-01,  2.2381e+00, -5.3576e-01,  3.5918e+00,  1.1379e+00,
        -1.9526e+00,  1.8112e+00,  9.9991e-01, -3.1638e+00, -1.2785e+00,
         1.3906e+00, -9.3265e-01, -4.1069e-01,  4.3888e+00, -1.4189e+00,
         1.3618e+00, -1.8309e+00,  2.7198e+00,  3.3644e+00,  3.4720e-02,
         2.4881e-01,  8.2893e-01,  1.7110e+00,  1.0475e+00,  2.7236e+00,
        -6.0390e-01,  3.7423e-01, -2.9238e+00,  9.4869e-01, -9.2287e-01,
         2.7799e-01,  1.1485e+00, -2.0989e+00, -1.3486e+00,  3.9662e+00,
        -2.4816e+00,  3.9098e-01,  7.4188e-01,  1.3237e+00,  5.7926e+00,
         3.4793e+00,  2.9109e+00,  4.3373e+00, -4.0917e-01,  2.4676e+00,
        -3.2160e+00,  6.4727e+00, -2.5777e+00, -6.2279e-01,  5.4384e-01,
        -4.4069e+00,  1.3053e+00,  1.6816e+00,  1.0559e+00, -4.4922e-01,
        -2.8391e+00, -1.5284e+00,  1.3362e+00,  1.4466e+00,  6.9598e+00,
        -1.7495e+00,  7.2009e+00,  2.3466e+00,  1.2693e+00,  1.7934e+00,
         3.9923e+00, -1.0624e+00, -3.0039e+00, -2.1656e+00,  1.1194e+00,
         5.4448e+00,  2.8726e+00,  1.5402e+00,  3.6688e+00, -3.5697e+00,
        -5.1255e+00, -2.6817e+00,  5.1480e+00,  1.1474e+00, -2.2078e+00,
         3.5786e+00,  3.0664e+00,  1.8230e+00]
LAMBDA_LAST = [-2.7112e-01, -1.9484e-02,  1.1871e+00, -2.3651e-01, -7.8785e-01,
           3.8270e-01, -2.5598e-01,  1.7283e-02, -2.7855e-01, -2.6684e-01,
           8.6654e-01, -3.9976e-01,  5.5052e-01, -2.6979e-02, -1.8347e-01,
          -2.7789e-01,  7.7297e-01,  1.2759e-01,  1.1521e-01, -9.6231e-02,
          -4.8865e-02,  7.4964e-01,  1.0076e-02,  5.1889e-02,  4.0162e-01,
          -4.6772e-02, -6.5322e-01, -4.0299e-01, -3.6230e-01,  4.6931e-01,
           9.7445e-01,  3.7804e-02, -5.2681e-02,  2.2450e-01, -2.4648e-01,
           9.7896e-01,  1.5048e-01,  5.8508e-01,  6.3898e-02, -2.6434e-01,
           3.3045e-03,  4.7045e-01, -7.1242e-01,  8.9434e-02,  5.0209e-01,
          -1.5602e-01, -2.6002e-01, -4.7046e-01, -1.0367e-01, -1.1544e-01,
           2.4355e-01, -2.0793e-01,  1.8636e-01,  3.1491e-01, -1.2275e+00,
          -7.5788e-02,  6.7287e-01, -5.6552e-01,  9.4318e-01,  3.9416e-01,
           6.1862e-01, -7.0703e-01, -1.0900e-01, -9.8923e-01, -3.7710e-01,
           3.2096e-01, -7.0121e-01,  2.6023e-01, -5.4237e-01,  5.3461e-01,
           4.1760e-01, -3.7229e-01,  3.3438e-01, -4.9450e-02,  2.7604e-01,
           5.1793e-01,  3.1532e-01,  3.8375e-01, -1.0921e-01, -4.7952e-01,
          -1.1689e+00, -4.5749e-01,  1.0644e-02, -4.5071e-03, -1.0487e+00,
          -5.8627e-01, -3.2616e-01,  1.3299e-01,  3.9814e-01, -1.5077e+00,
           2.7646e-01, -8.5175e-02, -1.1983e-01,  6.2474e-01, -4.6378e-01,
           9.8491e-01, -2.0762e-01,  5.4439e-01, -2.2552e-01,  6.9702e-01,
          -1.6924e+00,  8.1890e-01,  2.9624e-01,  1.3629e-01,  5.5088e-01,
           1.5243e-01,  2.6504e-01,  4.7094e-01, -4.5227e-01,  5.5268e-01,
          -2.1949e-01,  1.1425e+00,  9.4391e-01, -4.0621e-01, -9.8835e-02,
          -3.4111e-01, -7.6802e-01, -4.3134e-01,  1.8950e-01, -1.3660e-01,
          -6.4846e-01, -7.4943e-01,  2.4337e-01, -5.4814e-01,  8.7345e-02,
          -2.4815e-01,  4.5000e-01, -4.0372e-01,  1.3664e+00,  9.7818e-01,
          -9.6954e-02,  1.5820e-01,  1.6270e-01, -9.1726e-01,  1.5764e-01,
          -8.3399e-01,  5.0641e-01,  2.1871e-01,  4.1426e-01, -1.0467e-01,
           2.5890e-02,  7.0991e-03, -1.2456e+00, -2.7931e-01,  1.6957e-01,
          -2.0862e-01, -5.6063e-01,  2.7685e-01, -2.9279e-01, -5.3264e-01,
          -7.8653e-01, -7.1446e-01,  4.8230e-01, -7.5051e-01, -1.7507e+00,
           7.0198e-01,  1.6520e-01, -3.2696e-01, -1.9982e-01,  6.9768e-01,
          -3.1925e-01, -2.0315e-01, -4.8359e-01,  1.1155e+00,  2.3978e-01,
          -3.6813e-01, -7.2192e-01, -6.7090e-01,  2.3306e-01,  1.1002e+00,
          -1.1175e-01, -5.8069e-02,  8.0575e-01, -4.7671e-01, -2.9511e-02,
          -1.6372e+00,  4.8335e-01, -2.7619e-01,  7.6848e-01,  4.7617e-01,
           6.9857e-02,  4.4307e-01, -2.3777e-01,  8.8696e-01,  3.4168e-01,
           7.3026e-01,  3.0084e-01, -6.5248e-01, -4.8042e-01, -3.6268e-01,
          -4.1880e-01,  9.2843e-01,  4.4723e-01, -1.6529e-01, -4.0320e-01,
           5.4671e-01, -1.1079e+00,  1.6195e-01, -1.0121e-01,  5.2512e-01,
           2.3970e-01,  3.4538e-01,  1.1423e-01, -7.2254e-01, -5.4705e-01,
           8.3059e-01,  3.9615e-01, -8.0637e-01,  7.2453e-01,  1.5357e+00,
           2.1148e-01,  6.5017e-01,  7.9364e-01,  3.5284e-01, -6.0917e-01,
          -3.3930e-01,  3.3258e-01,  1.0510e-01,  5.6305e-01,  1.5548e-01,
          -3.9512e-01, -1.2176e-01, -1.9500e-01,  8.9521e-01, -2.8723e-01,
          -8.0612e-01, -3.2599e-01,  3.8997e-01,  1.0896e+00, -5.8791e-01,
          -4.4436e-01,  1.2096e-01,  3.6338e-01, -6.4989e-02, -1.3304e-01,
           1.0013e-01, -2.3577e-01, -1.1267e+00, -7.7495e-01,  2.8269e-01,
          -4.1405e-01,  2.9576e-01,  5.7210e-01,  1.7998e-01,  6.2155e-01,
           3.0004e-01, -6.2259e-01, -1.4267e-01,  1.2259e+00, -9.3386e-01,
          -4.1575e-01,  1.3961e+00,  1.6153e-01,  3.1265e-01, -1.2588e+00,
           8.9851e-01,  1.0144e-01,  7.3114e-01,  7.4555e-01,  7.6716e-02,
           2.4768e-01, -5.5584e-01, -1.1711e+00,  6.1871e-01,  2.5751e-01,
          -1.3800e+00,  4.9996e-02,  3.4533e-01, -1.0585e+00, -5.7644e-01,
          -5.0262e-01, -2.4325e-01,  5.0370e-01,  2.5642e-02,  2.1516e-01,
          -9.2539e-01,  5.5841e-01,  4.5263e-01,  1.1000e-01,  8.3521e-01,
           5.4531e-01, -7.1082e-01, -7.1851e-01,  3.8540e-01, -5.2492e-01,
           1.1181e-01,  1.0949e+00, -1.0487e-01,  8.2089e-02, -8.6285e-01,
           5.1584e-01, -6.3247e-01,  3.4151e-01,  3.3353e-01, -5.3792e-01,
          -3.1528e-01, -6.0546e-01, -6.6235e-01,  1.1031e-01, -9.1215e-03,
          -1.6554e-01, -5.6980e-01, -6.4319e-01,  5.8262e-01, -7.8016e-01,
          -3.9655e-02, -9.2614e-01, -7.2894e-02,  7.4690e-01,  4.9696e-01,
          -2.9911e-01,  1.7965e-01,  1.6092e-01,  1.7455e-01,  1.5240e-01,
           4.9658e-01, -4.1208e-01,  4.2773e-01, -1.0274e+00,  2.7690e-01,
           4.1212e-01,  7.3319e-01, -2.4683e-01,  2.9028e-01, -4.7003e-01,
           1.9127e-02,  1.2840e-01, -6.0547e-01,  5.4682e-02,  9.7474e-01,
           1.2755e+00,  1.7473e-01, -1.3953e-01,  1.2560e-01, -2.4195e-01,
          -1.3426e-01, -1.6188e+00,  8.5573e-02, -5.0826e-01, -5.9679e-01,
          -3.8215e-01, -7.7767e-01, -1.5350e+00, -6.9633e-01,  1.5304e-01,
           1.5401e-01, -7.5284e-02,  6.1121e-01, -5.9368e-01, -6.8389e-01,
           6.9564e-01,  9.7246e-01, -4.2462e-01, -3.8688e-02, -2.2193e-02,
           1.4119e+00, -3.6656e-01,  1.8114e-01,  4.4613e-01,  4.8967e-01,
          -2.0049e-01,  7.3923e-01, -2.7412e-01,  2.9382e-01, -5.4739e-01,
          -5.6247e-01, -2.6957e-01,  2.5865e-01,  1.6068e-01,  3.9571e-01,
           5.4739e-01,  1.8792e+00, -1.0914e+00, -2.9470e+00, -1.8445e+00,
          -5.9938e-01,  4.1181e-01, -9.5988e-01,  4.4853e-01, -1.0414e-01,
          -5.1078e-01, -3.1849e-01, -6.6332e-01,  3.1865e-01, -1.6831e-01,
          -4.2856e-01, -1.9396e-01, -3.5404e-01, -7.9094e-01, -7.7091e-01,
          -7.7724e-02,  3.2333e-02,  6.1809e-01,  7.4002e-01, -6.1918e-01,
          -9.2702e-01,  8.9702e-01, -1.1350e-01, -7.1524e-01, -3.3438e-01,
          -7.8933e-02, -7.0893e-01, -7.3138e-01,  1.2766e+00, -4.9288e-01,
          -1.4021e-01,  2.4259e-01,  4.5427e-01, -1.8324e-01,  3.2454e-01,
          -5.0511e-01, -5.0264e-01,  7.6587e-01, -2.9091e-01,  6.0512e-01,
           1.2963e+00, -3.8527e-01,  1.3400e-01, -1.7228e-02,  3.5018e-01,
           6.9481e-01, -3.6517e-01, -7.2199e-01, -5.8454e-01,  4.7839e-01,
          -4.7271e-01, -3.9880e-01,  3.5402e-01,  2.4314e-01, -3.2939e-01,
          -1.3631e-01,  4.6017e-01,  4.9270e-01,  1.6648e-01, -9.8535e-02,
           4.1418e-01, -1.9121e-01,  3.4665e-02,  1.6517e-01,  1.5633e-01,
           1.2415e+00,  6.7426e-01, -3.2575e-01, -6.3591e-02, -1.2957e+00,
          -7.2428e-01,  2.3185e-01,  2.5345e-01, -2.4839e-01,  4.4333e-01,
          -2.9187e-01, -6.5338e-01,  4.4689e-01,  6.8004e-01,  4.8792e-01,
           6.0997e-01,  2.8371e-01,  3.7076e-01, -4.6469e-02,  5.6932e-01,
           9.4198e-02, -1.4453e-01,  6.6920e-01,  1.1931e+00, -2.4174e-01,
          -8.2340e-01, -3.2609e-01, -5.2672e-01, -4.7100e-01,  5.0188e-01,
          -7.7546e-02, -7.9021e-04,  2.9700e-01, -1.5560e-01, -3.4369e-01,
           8.4991e-01,  3.1557e-01,  2.9157e-01,  1.1363e+00, -3.3188e-01,
           8.6955e-01, -4.2050e-01,  2.5033e-02, -1.7820e-01,  5.0287e-01,
          -5.8489e-01,  4.1587e-01, -5.3894e-01, -1.0459e+00,  3.0867e-02,
           4.1517e-01,  2.6117e-04,  3.3575e-01, -6.2470e-01,  2.5551e-01,
          -3.6322e-01, -9.4375e-02,  6.4937e-03,  5.0981e-01,  2.6086e-01,
          -2.6802e-01,  4.7104e-01,  5.1318e-01,  6.5763e-02,  5.0689e-02,
          -8.0779e-01,  1.3732e-01,  1.7572e-01, -8.7809e-01, -5.0983e-02,
          -7.4688e-01, -9.9615e-01,  6.4606e-01, -2.7811e-01, -7.4268e-01,
          -5.5709e-01, -2.4867e-01, -5.8733e-01, -2.1635e-01,  3.2650e-01,
          -7.1902e-01,  8.9931e-01,  2.9908e-01, -5.7376e-01, -3.9907e-02,
          -1.1925e+00, -7.7638e-01, -1.6145e-01, -6.0350e-01,  2.4783e-02,
          -1.5811e+00,  5.3341e-01,  1.3276e-02, -5.4674e-02,  5.7282e-01,
          -1.3822e-01, -2.0942e-01,  7.3400e-01, -2.6003e-01,  7.5716e-01,
          -3.4822e-01, -7.4575e-01,  2.3324e-01, -3.2568e-01,  2.9621e-01,
           1.9006e-01,  1.4064e-01,  1.4794e-01,  1.2174e-01,  3.6225e-01,
           5.3283e-01,  5.3750e-02,  7.6945e-01,  6.7380e-01, -6.5619e-01,
           2.9267e-01,  9.6183e-01,  1.9106e-01,  3.6448e-01, -6.3854e-02,
          -1.4870e+00, -2.0311e-02, -3.9629e-01,  3.4349e-01, -5.5546e-01,
          -5.5974e-01, -5.3893e-01,  1.2982e+00,  6.9516e-01,  1.3282e-01,
           9.7935e-01,  5.8554e-01, -7.0921e-02,  2.6946e-01, -4.8466e-01,
           3.2707e-01, -3.3424e-03, -3.5955e-01,  1.4867e-01,  1.0360e-01,
          -3.9108e-01, -6.5657e-01,  2.5733e-01,  2.7968e-02,  5.5417e-01,
           1.0162e+00,  5.2846e-02,  9.8427e-02, -1.2185e-02, -9.6412e-01,
          -1.0721e+00, -4.6253e-01,  1.9993e-01, -1.4552e-01,  5.8451e-01,
          -2.8108e-01,  8.2090e-01, -6.2348e-01,  1.0059e-01, -1.7890e-01,
           3.1870e-01, -9.3353e-01,  1.2595e+00, -5.7801e-01,  2.1672e-01,
           2.9063e-01, -1.5989e-01, -3.3841e-01, -1.5010e+00, -9.6460e-02,
          -1.4139e-01,  6.4053e-01, -4.7302e-01, -1.2156e-01,  5.9674e-01,
          -1.1983e+00, -1.1576e+00, -1.4709e-01, -6.1577e-01,  5.2284e-01,
           2.0726e-01,  4.3297e-01,  1.8169e-01, -6.5215e-01, -1.0968e+00,
           2.2274e-01, -3.9752e-01, -8.3351e-01, -9.9628e-01, -7.1246e-01,
          -1.0321e+00, -3.3363e-01,  2.3935e-01, -5.7872e-01,  5.1758e-01,
          -2.2163e-01, -1.5561e-01, -1.6335e-01, -7.6000e-02, -9.6072e-01,
          -2.6337e-01, -1.3279e-01,  7.1240e-05,  4.2294e-01,  2.2714e-01,
          -1.1127e-01, -9.3787e-01, -3.4713e-01, -6.6260e-01, -2.7248e-02,
           7.5322e-01, -2.6507e-01,  5.1616e-02, -1.0964e-01, -2.7913e-01,
           8.7065e-01,  2.3047e-02, -4.9664e-01,  2.4144e-01, -6.9896e-01,
           3.1090e-01,  2.7701e-01, -1.9566e-01, -1.4590e-01, -4.3011e-02,
           6.5402e-01,  1.7550e-01, -1.5634e-01,  8.3432e-01,  1.8730e-01,
           4.8588e-01, -3.5388e-01,  2.9595e-01,  7.8537e-02,  1.6562e-02,
           6.2366e-01,  2.4395e-01,  8.8707e-02,  3.6426e-01,  4.2999e-01,
          -1.1587e-01,  8.1638e-01,  4.8858e-01, -1.5937e-01, -3.0118e-01,
           3.5350e-01,  7.8059e-01, -6.3103e-01,  9.1354e-01, -3.8857e-01,
           2.3200e-01,  6.8314e-01,  3.0335e-02, -4.6234e-01, -2.4003e-01,
           4.7407e-01,  6.4558e-01, -1.4141e-01,  8.7522e-01, -3.8463e-01,
           1.3792e-01, -7.6410e-01,  1.0888e+00,  3.4963e-01,  6.2781e-01,
          -1.1084e-01, -2.1518e-01,  4.2723e-01, -9.9503e-02,  1.2545e-01,
           5.9704e-01, -5.2212e-02, -8.1599e-01, -7.9821e-02, -1.2726e-01,
          -7.1392e-01, -1.6843e-01, -4.8108e-01, -1.0708e-03,  1.1487e+00,
          -3.4614e-01,  6.4595e-01, -5.6114e-01,  1.9847e-01,  9.4903e-01,
           6.7658e-01,  1.1068e+00,  7.7319e-01,  6.7308e-01, -8.2154e-03,
          -7.0415e-01, -1.7556e+00,  9.9639e-04, -2.3273e-01,  7.8982e-01,
          -1.0331e+00,  4.1906e-02,  7.8637e-01, -1.2281e-01, -3.8990e-02,
          -7.1216e-01, -2.5537e-01, -5.9416e-02,  5.0199e-01,  1.0867e+00,
          -2.2979e-01,  1.7716e+00,  4.5148e-01,  6.6619e-01,  7.2988e-01,
           6.2048e-01, -7.1903e-01, -5.9458e-01, -3.4134e-01,  3.2643e-02,
           5.1760e-01,  5.0115e-01,  3.2215e-01,  8.8846e-01, -1.6811e-02,
          -8.5447e-01, -1.1209e+00,  1.1287e+00,  6.0727e-01, -5.6550e-02,
           2.8858e-01, -1.0401e-01, -2.7666e-01]
OPEN_RRB = [-1.6961e+00, -2.0422e+00, -1.0674e+00, -3.2021e+00, -6.9292e-01,
         2.4154e+00,  1.4091e+00, -5.1404e-01,  6.5184e-02, -2.0265e+00,
        -1.7034e-01,  1.8869e+00, -8.0829e-01,  7.5037e-01,  1.6284e+00,
         1.9944e+00,  1.1139e+00,  1.5102e+00,  4.1484e+00,  3.3863e+00,
        -8.7745e-01, -7.4159e-01, -4.5839e+00,  3.7352e+00,  1.5515e+00,
         1.7917e+00,  6.4000e-01,  1.6950e+00, -2.5841e+00,  1.0166e+00,
         2.3752e+00, -7.3937e-02,  6.5777e-01, -1.0625e+00, -1.9552e+00,
        -1.8158e+00, -2.0388e+00,  1.7874e+00, -4.8322e+00,  2.9802e+00,
         1.5244e+00, -2.2772e+00,  4.3051e+00, -2.3716e+00, -1.1754e+00,
         4.4284e+00,  2.8018e+00, -1.7409e+00, -1.2170e+00, -2.6682e-01,
        -5.3496e+00,  1.8810e+00,  7.4366e-01,  3.1942e+00, -2.5183e+00,
        -4.9682e+00, -2.5894e+00, -4.0731e-01, -2.5431e+00,  1.9351e-01,
         3.1433e-02, -1.5575e+00,  2.8980e+00,  7.1151e-01,  1.1598e+00,
         1.0421e+00,  7.2613e-01, -1.9346e+00, -5.0683e+00,  2.0833e+00,
         1.5775e+00,  2.1978e+00, -1.5595e-01,  2.1762e+00,  5.3255e+00,
        -1.8626e+00,  2.3395e+00,  7.3629e-01,  1.9904e+00, -5.3136e-01,
         9.5281e-01,  2.0601e+00, -2.1127e+00, -3.3981e-01, -3.3191e-01,
        -1.0453e+00, -1.8583e+00, -5.2164e-01, -2.0311e+00, -6.3054e-01,
        -5.7385e+00, -1.7198e+00, -3.5721e+00, -6.8094e-01,  2.9738e+00,
        -1.0763e+00, -1.1112e+00, -6.0012e-01,  2.4744e-01, -3.7398e+00,
        -2.3289e+00, -4.8977e+00, -9.3011e-01,  4.1668e-01, -1.7510e-01,
         1.1735e+00, -3.1149e+00, -5.4114e+00,  1.3469e+00, -1.0527e+00,
        -9.8216e-01,  1.1082e-01,  1.0169e+00, -4.3010e-01, -1.7000e+00,
         4.4585e+00,  3.1620e-01,  2.6501e+00, -3.5849e+00,  3.7631e+00,
         1.3025e+00, -6.7341e-01, -5.9563e-01,  1.7213e+00, -3.2804e-01,
        -1.5905e+00,  7.3711e-01, -2.3362e+00,  8.5947e-02,  8.6850e-01,
         6.6069e-01, -1.7379e-01, -2.3886e+00, -4.1177e-01,  5.7395e-01,
         2.5181e-01,  1.2002e+00, -1.6153e+00,  2.0633e+00, -2.1603e+00,
         1.2865e+00,  2.3392e+00,  8.3527e-01, -2.9933e+00,  6.2104e-01,
        -1.5871e+00, -1.5603e+00,  3.3265e-02, -3.0403e+00,  2.9055e-01,
        -2.8870e+00,  1.8793e+00, -2.0055e+00,  1.4061e+00, -1.2149e+00,
        -2.7013e+00,  4.7310e-01,  2.6423e+00, -2.2577e+00,  2.6455e+00,
         3.9157e+00,  1.5465e+00, -8.4097e-01,  1.4340e+00, -1.6180e+00,
        -2.2316e+00, -1.8280e+00,  2.4066e+00,  1.2534e+00,  2.0239e+00,
        -4.1864e+00, -4.5658e+00,  1.5222e+00, -2.3995e+00, -1.6374e+00,
         2.6784e+00, -3.5471e-01,  1.8330e+00, -3.4033e-01, -8.5155e-01,
        -1.3926e+00,  2.3794e+00, -1.8515e+00,  4.7972e-02,  2.6718e+00,
         9.2814e-01,  1.4830e+00, -2.9340e+00,  2.1560e+00,  2.1861e+00,
        -1.2146e+00,  4.2638e-01,  3.6490e-01, -1.0657e+00, -9.0493e-03,
        -4.4904e+00, -8.0832e-02, -1.8616e+00,  2.8086e+00, -3.0018e+00,
         2.1633e+00, -1.2720e+00, -9.8114e-01,  2.6729e+00, -2.2918e+00,
         2.8787e+00,  8.9875e-01, -3.1974e+00,  2.9112e+00, -1.4325e+00,
         8.1388e-01,  3.2112e+00, -1.7384e+00, -3.9465e-01, -2.9474e-01,
        -9.6165e-01,  1.9185e+00, -9.0525e-01,  9.4798e-01, -3.1953e+00,
         7.5623e-01, -4.5319e+00,  5.7622e-01,  3.2002e-01, -4.4746e+00,
         2.9433e+00,  6.9177e-01,  5.3807e-01,  3.3243e+00, -3.0679e+00,
        -2.2305e+00, -4.7261e+00,  3.2123e+00,  1.1429e+00,  2.1933e+00,
         1.3125e+00, -2.0459e-01, -7.8156e-01, -9.5011e-01, -2.4314e+00,
         2.0503e+00, -4.0303e-01,  1.1590e+00,  1.8183e-01,  6.1332e-01,
         3.5937e-01,  2.8917e+00, -4.7690e+00, -3.5002e-01,  9.1190e-01,
        -2.6377e+00, -2.5803e-01,  8.6425e-01, -6.3921e-01, -2.3924e-01,
        -3.9379e+00, -7.1618e-01, -1.6393e+00,  3.1670e+00, -6.6433e-01,
         4.9355e-01,  8.0072e-01,  2.5679e+00, -1.5016e+00, -1.4663e+00,
         9.1624e-01, -1.6826e+00, -1.6722e+00, -1.4309e+00, -4.3222e+00,
        -2.8191e+00,  1.2341e+00, -2.5072e+00, -3.0831e+00, -4.1961e+00,
         8.6770e-01, -6.5037e-02, -1.9207e+00,  9.5848e-01,  4.6156e+00,
         7.3115e-01,  4.3483e-01, -1.9719e+00, -9.4572e-01,  4.4098e+00,
        -9.0579e-01, -3.3964e+00, -2.0920e+00,  1.1643e+00, -1.0710e+00,
        -1.3980e+00,  3.0292e+00,  1.5874e+00, -1.7424e+00,  1.0746e+00,
         2.5482e-02,  4.1966e-01, -1.0426e+00, -1.9230e+00, -7.5293e-01,
         1.3214e+00,  2.6582e+00,  2.4018e-01, -1.7122e+00,  4.1585e+00,
         1.4960e+00, -2.0499e+00,  2.4872e+00, -2.4720e+01, -1.3077e+00,
         2.8969e-01, -1.7807e+00,  5.2185e-02, -1.6921e+00,  1.9651e+00,
        -9.0436e-01, -4.2033e+00, -6.3004e-01,  3.3973e+00, -3.6973e+00,
         2.1583e+00,  1.1718e+00,  2.3586e-01, -1.4293e+00, -1.0927e+00,
        -2.7247e+00, -4.3233e-01,  3.9446e+00, -1.2609e+00, -1.3599e+00,
         2.8010e+00, -2.1461e+00, -4.1305e+00,  7.8284e-02,  1.3296e+00,
         2.2350e+00, -6.4625e+00,  1.5635e+00, -1.6659e+00, -6.8757e-01,
         6.7574e-01,  6.6134e+00,  6.6645e-04,  2.5962e+00,  2.7438e+00,
        -2.2002e+00,  5.0677e+00,  7.2657e-01,  2.3329e+00,  1.6440e+00,
        -5.3143e-01,  2.4088e+00,  2.8364e+00,  3.0615e-01,  2.6672e+00,
         1.7359e+00,  2.7138e-01,  3.2570e-01,  5.5201e-01, -2.7636e+00,
         9.3898e-01, -8.6797e-01, -1.4763e+00,  2.2335e+00,  2.6227e+00,
         3.1539e+00,  1.5660e+00, -1.8300e-01, -6.8947e-01, -3.8640e+00,
         1.0240e+00,  2.2784e+00, -4.7940e+00, -9.3738e-01, -3.0787e+00,
         2.5984e+00,  2.8046e+00, -3.7207e-01, -2.2103e+00,  2.1580e+00,
        -2.3156e+00, -1.1262e+01, -2.5952e+00, -1.4019e+00,  7.5979e-01,
        -2.4221e+00,  6.0770e-01, -3.6796e+00, -4.7907e+00, -2.2612e+00,
        -1.0210e+00,  3.1658e+00, -3.1337e+00,  1.7480e+00, -4.6236e-01,
         2.9617e-01, -2.2566e+00,  7.1449e-01,  7.2416e-01,  1.9374e-01,
         1.4780e+00,  1.1667e+00,  1.8519e-01,  1.5098e+00,  4.2808e+00,
        -6.8178e-01,  1.5543e+00,  3.5067e+00, -3.4621e+00,  3.6763e+00,
         6.6310e-01,  1.5020e+00,  1.2753e+00, -9.6668e-01, -3.0798e+00,
        -3.7162e-02,  9.7457e-01, -1.4209e+00,  5.9346e-01, -2.7569e+00,
        -2.3192e+00,  1.5222e+00,  7.1953e-01, -1.3383e+00,  1.1373e+00,
        -3.9692e+00, -3.2520e-01,  1.3425e+00, -4.4285e+00, -1.5919e+00,
        -2.8518e+00, -4.4901e+00, -5.4101e-01, -2.6228e+00,  7.6148e-01,
        -1.8706e+00, -2.5793e-01,  9.6222e-01,  2.7280e+00,  9.3236e-01,
         2.0571e-01,  1.7552e+00, -2.4023e+00, -4.0125e+00,  1.5290e+00,
         2.3530e-01,  3.5765e+00, -1.4883e+00,  1.8932e+00,  8.6151e-01,
        -2.8605e+00,  1.5433e+00,  2.3539e+00,  1.5515e-01, -9.2036e-01,
         1.3793e+00,  4.2253e-01,  3.8895e+00,  2.4011e+00, -1.8777e+00,
         3.1947e+00,  1.3093e+00, -2.3780e+00, -4.4316e+00,  1.6977e+00,
        -1.7530e+00, -1.5433e+00,  1.6549e+00,  3.3100e+00, -6.3364e-01,
        -1.9421e+00,  6.9846e-01,  5.0258e+00,  1.8339e+00, -2.0303e+00,
         6.8069e-01,  1.1632e+00, -2.0962e+00,  1.3267e+00, -1.7468e+00,
        -2.9267e+00, -1.4303e-01,  2.6801e+00, -2.0688e+00, -1.9683e+00,
        -4.3596e+00, -1.5459e+00,  1.9205e+00,  4.3688e-01,  7.8965e-01,
        -5.2332e-01, -8.3964e-01, -1.3203e-03,  1.6331e+00, -3.0622e+00,
        -9.2503e-01,  6.0332e-01,  6.0411e+00,  5.5061e-01, -1.3670e+00,
         4.0810e-01,  4.3478e-01, -2.7691e+00, -1.7854e+00,  1.8252e+00,
        -7.5156e-01,  8.9125e-01,  1.1144e-02, -4.7463e+00, -3.3891e+00,
         1.9001e+00,  3.9432e-01,  1.7373e+00,  3.8323e+00, -2.8319e+00,
         2.8462e+00, -1.7991e+00, -3.6439e-01,  4.3300e+00,  8.8645e-01,
        -2.2358e-01, -1.2470e+00, -3.4417e+00,  3.9839e+00,  3.6342e-01,
         2.9943e+00,  3.3266e-01, -3.9151e+00,  5.8184e-01, -1.9564e+00,
        -9.0570e-01,  5.3430e-02,  1.6216e+00,  1.7305e+00,  1.9329e+00,
         9.0219e-01, -1.3724e+00, -1.4880e+00, -4.9689e+00,  2.0910e+00,
         1.0341e+00,  2.9361e+00,  3.6064e+00, -1.2875e+00, -5.7857e-01,
         1.9964e+00, -7.3340e-01,  1.7880e+00,  5.2903e-01, -2.1394e+00,
        -1.7060e+00,  8.7629e-01, -1.5791e+00, -7.4643e-01,  1.1092e+00,
        -1.4456e+00,  7.5136e-01,  4.7553e+00, -8.0595e-01, -2.1451e+00,
         1.6992e+00,  2.8645e-01, -1.8405e+00, -3.6413e+00,  8.0756e-01,
         1.3828e+00, -1.0627e+00, -4.7082e-01, -2.1867e-01,  3.8069e+00,
         7.2077e-01,  1.2954e+00,  3.6877e-01, -5.8064e-01, -1.1223e+00,
         1.0599e-01,  1.5754e+00,  2.9650e+00, -2.3612e+00,  1.5218e+00,
         1.9648e+00,  4.3682e+00,  5.7583e-01, -1.3907e+00,  2.0143e+00,
        -4.0548e+00, -2.0013e+00,  2.6197e+00, -1.4793e+00,  1.2565e+00,
         9.5460e-01,  1.7420e+00,  4.1539e+00, -7.3877e-02, -2.8730e+00,
         3.1950e-01,  1.6404e-01, -1.9337e+00, -1.2701e+00,  1.3421e+00,
         1.3087e+00, -1.6353e+00, -1.4192e+00,  2.1709e+00, -2.5546e+00,
        -3.7331e-01,  2.6944e-01, -1.7492e+00, -2.5385e+00,  1.2498e-01,
        -2.0088e+00,  2.6782e+00, -3.7370e+00,  1.9791e+00, -5.1984e-01,
        -2.2545e+00,  7.3026e-01,  2.1362e+00,  4.6137e-01, -7.7869e-02,
         1.0323e+00,  4.5969e+00,  2.5986e+00,  1.4878e-01, -3.8888e-01,
        -1.3985e+00,  3.8710e-01,  1.2227e+00,  8.6056e-01, -3.7328e+00,
        -1.0564e+00,  2.7315e+00,  3.1288e+00, -2.5105e+00, -1.9290e+00,
        -1.8744e+00, -1.4893e+00,  2.9363e+00,  9.1775e-01,  1.1076e-01,
        -2.9509e-01,  2.9963e+00,  1.5671e+00,  3.7346e-01,  3.6370e+00,
         2.0757e+00,  1.3094e+00,  2.9785e-01, -3.6125e+00, -1.9912e+00,
        -2.7642e+00,  1.0376e-01, -6.5000e-01,  1.7430e-01, -3.3447e+00,
        -2.8044e-01, -2.7744e+00,  5.3123e+00,  3.8018e-01,  1.9502e+00,
        -2.4023e+00,  2.4526e+00, -1.3847e+00, -1.4545e+00,  2.3665e-01,
        -8.7737e-01, -3.0753e+00,  1.5392e+00,  1.3352e+00,  2.3572e+00,
         1.5128e+00, -7.4508e-01,  1.7468e+00,  9.9836e-01,  3.6106e+00,
        -2.3211e+00,  1.4355e+00, -1.5977e+00, -5.4448e-01,  1.0320e+00,
        -1.2304e+00,  4.7022e+00,  8.7680e-01,  2.3519e-01,  3.9593e+00,
         5.6014e-01,  9.8942e-01,  4.6026e-01,  2.7092e+00, -1.3953e-01,
        -1.8739e+00,  1.4642e+00,  4.6972e+00, -2.6591e+00, -7.2744e-01,
         3.4609e-01, -6.5104e-01, -4.8958e+00, -8.6633e-03,  1.1517e-01,
        -1.2366e+00, -7.6128e+00,  1.2527e+00, -1.1398e+00,  2.7182e+00,
         5.7240e-01,  1.5866e+00, -8.1452e-01,  5.8519e-01,  1.7552e+00,
        -7.8614e-01, -2.2964e+00, -4.0479e+00, -2.8071e+00, -6.2524e-01,
         3.4324e+00, -3.4033e-01, -2.1575e+00,  3.0227e+00,  7.7441e-01,
        -6.3353e-02,  4.5243e+00, -6.3948e-01, -7.5664e-01, -3.1141e-01,
         2.4622e-01, -8.3775e-02, -4.4048e+00,  3.1531e+00, -1.0543e-01,
        -1.0045e+00,  3.3816e+00,  1.6777e+00, -4.9275e+00,  2.5141e-01,
         3.2209e+00, -4.4022e-01,  2.5940e+00, -1.6425e+00,  1.2809e+00,
        -8.3048e-01, -2.0874e+00, -1.5069e+00, -2.6095e+00,  3.9389e-01,
        -2.0322e+00,  1.3766e+00, -7.2718e-01, -9.8230e-01,  1.7056e+00,
        -2.1116e-01, -3.1722e+00, -1.9813e+00,  1.1828e+00,  3.7889e-01,
        -3.1476e-02,  3.5646e-01,  1.8780e+00,  1.7995e+00, -2.9479e+00,
        -1.4645e+00, -5.6230e-01, -7.6042e-01,  1.9764e-01,  2.2066e+00,
         1.2697e+00, -1.2788e+00, -3.6808e-01]
OPEN_RRB_MULTILINGUAL = [-1.3511e+00, -3.6475e+00,  4.3235e+00,  3.2830e+00,  1.8856e+00,
         2.3573e+00, -2.2396e+00,  1.3307e+00, -1.4677e+00, -2.3493e+00,
         5.0824e+00, -1.5378e-01, -1.4434e+00, -1.1534e+00,  2.6520e+00,
        -1.7617e+00, -2.3529e+00,  2.0859e+00, -4.2827e-01,  2.8607e+00,
        -6.5955e-01, -1.7368e+00,  4.7937e-01,  2.6523e+00, -2.3852e+00,
        -3.7625e-01,  4.9969e-01,  2.3862e+00, -1.0088e-01, -1.8250e+00,
         8.0115e-01,  1.5064e+00,  1.0800e+00,  6.7246e+00, -3.9925e+00,
         3.9236e+00, -1.6474e+00, -6.2489e-01,  1.4980e-02, -6.8983e-01,
        -7.8422e-01, -2.6498e+00,  2.0059e+00,  1.2511e+00, -3.0701e+00,
         2.4403e+00,  9.5169e-02,  2.6505e+00,  3.0773e+00,  3.6692e+00,
        -2.6041e+00,  1.6833e+00, -4.5358e+00,  1.1727e+00, -2.0255e+00,
         2.0556e+00,  2.1217e+00, -3.1419e+00, -1.8772e+00,  1.6837e+00,
         7.2600e-01, -1.0946e+00, -4.1544e+00, -3.3357e+00, -9.5530e-01,
         1.3501e+00, -2.3266e+00, -3.7424e+00, -1.2444e+00,  2.9695e+00,
         3.2568e+00, -3.1307e+00,  3.7525e+00, -4.2981e-01,  3.3976e-01,
        -2.9811e+00,  1.5013e+00,  1.8252e+00, -2.4150e+00,  1.7126e+00,
         2.8062e-01,  3.4859e+00, -5.9039e-01,  5.7493e-01,  7.5908e-01,
        -1.2970e-01, -6.0996e-01,  1.6661e-01,  2.8544e+00, -2.3990e+00,
         4.1300e-01, -4.8119e-01,  2.2584e+00,  6.1484e-01, -3.7069e+00,
         2.9552e+00,  6.9742e-01,  8.3086e-01,  2.4226e+00, -2.0856e+00,
        -5.3309e-01,  1.9363e+00, -2.0016e+00, -2.0461e+00, -1.6267e+00,
         4.3726e+00,  1.9299e+00,  2.4924e+00, -7.4597e-01,  3.6789e-01,
         2.5275e+00,  1.9164e+00, -3.5022e+00, -3.5162e-01, -2.0432e+00,
         2.6578e+00, -5.5865e+00, -3.4017e+00, -1.7668e+00, -3.8434e+00,
        -2.3660e+00, -1.3625e+00,  4.6435e+00, -5.0495e+00,  3.8948e-01,
         2.1057e-01,  2.4945e+00, -2.4231e+00,  7.7609e-01,  3.6606e+00,
         1.8479e-01, -1.8868e-01, -2.6052e+00, -2.0711e+00, -9.2511e-01,
        -2.6385e+00,  3.4107e-01,  2.7373e+00, -1.0561e+00, -3.6342e+00,
         3.7254e+00,  3.3188e-01,  2.8959e+00, -3.7341e+00, -2.1733e+00,
        -3.1808e-01, -6.0798e+00, -8.5572e-02,  2.3138e+00, -2.9078e+00,
        -3.0039e-01, -2.8844e+00,  1.3916e+00,  1.8224e+00, -1.3631e+00,
        -6.9275e-01,  2.0445e+00, -3.8444e+00, -2.5828e+00,  1.6524e+00,
        -1.1121e+00, -1.7174e-01,  8.6143e+00,  6.7528e+00, -2.8471e+00,
        -4.7916e-01, -6.4415e-01, -2.6406e+00, -1.5644e-01, -6.3917e-01,
         1.7210e+00, -2.5972e+00, -1.5035e+00, -4.5539e+00, -2.1935e+00,
         4.6450e-01, -2.6930e+00, -3.3413e+00,  1.6060e+00,  1.7632e+00,
        -2.8157e+00, -3.9628e-01,  3.4915e+00, -1.2895e-01,  1.1930e+00,
         7.3010e-01,  1.0182e+00, -2.7559e-01, -6.6808e+00,  2.8656e+00,
         1.7108e+00,  2.1830e+00, -3.1494e+00,  1.3947e+00, -1.0278e-01,
        -2.8459e+00,  8.1809e-01,  3.8067e-01, -3.4141e+00,  8.4059e-01,
         1.5422e+00,  3.0383e+00, -1.1165e+00, -1.8874e-01, -2.2614e-01,
         3.9992e+00,  9.0469e-01, -5.1392e+00,  5.1705e+00,  2.9748e+00,
         2.3506e+00,  1.1331e+00,  5.6504e+00,  4.2246e-01, -2.4056e+00,
        -4.2173e-01,  2.3114e+00, -1.5568e+00,  1.3053e+00,  1.6604e+00,
        -3.1543e+00,  2.4069e+00,  5.0910e-02,  2.1057e+00, -7.3482e-01,
         1.1598e+00,  2.4675e+00, -6.6970e+01,  2.9951e+00,  1.0316e+00,
        -3.6728e+00,  2.8886e+00,  9.4854e-01,  1.2323e+00, -2.5937e+00,
        -2.8944e+00,  2.6858e+00, -4.0699e+00,  1.1050e+00, -1.3052e+00,
        -1.3590e+00,  7.1629e-01, -5.6021e+00, -3.5035e-01, -1.0083e+00,
         4.4246e+00, -1.9850e+00, -5.1779e-01,  1.0054e-01, -3.7676e+00,
        -5.1292e-01,  3.4950e+00,  2.8720e+00,  6.0454e+00, -2.3473e+00,
         2.3565e+00,  7.3988e-01,  3.8675e+00,  1.6812e-01, -1.9456e+00,
         3.0885e-02,  1.3262e+00, -5.8261e-01, -2.2785e+00,  1.4419e-01,
         8.8789e-01,  1.5201e+00,  1.3359e+00, -1.8759e-02, -4.1665e+00,
         8.7957e-01,  3.4865e+00, -3.9819e+00,  7.0994e-01, -2.2084e+00,
         9.8596e-01, -1.6070e+00,  1.7674e+00,  2.4184e+00,  9.2730e-01,
         1.2436e+00, -1.4699e+00,  2.0177e+00, -3.8311e-01, -1.8985e+00,
         3.0083e-01,  4.4322e+00,  1.2001e+00,  3.2004e+00, -1.4513e+00,
         3.8294e+00, -4.1980e-01,  4.2723e+00, -7.0166e-01, -1.3186e+00,
        -1.9172e+00, -8.9554e-01,  9.7246e-01,  2.8153e+00, -2.0810e+00,
        -1.4047e+00, -9.4697e-01, -2.7429e+00,  2.0049e-01, -2.9266e+00,
        -1.3051e+00,  6.2540e-01,  1.3509e+00,  2.0884e+00, -1.1869e+00,
         3.3394e+00, -2.7865e+00,  2.2044e+00, -1.2736e+00, -4.3581e+00,
        -4.4259e+00,  1.4648e+00,  2.0620e-02,  4.6906e-02, -1.6172e+00,
        -8.4372e-02,  3.4057e+00,  1.7970e+00, -1.1818e+00, -1.5770e+00,
         1.0947e+00, -2.0559e+00,  2.0136e+00,  1.5421e+00, -3.4434e+00,
         1.9102e+00, -1.0974e+00, -2.1179e+00,  6.2028e-01, -8.1902e-01,
         1.5592e+00, -2.5846e+00,  7.5185e-01,  3.1496e-01,  2.3436e+00,
         6.8465e-01, -1.6782e+00, -1.3849e+00, -3.6869e+00, -3.1397e+00,
        -5.4300e-02,  1.2605e+00, -3.8601e+00, -1.5264e+00,  9.5652e-01,
         1.2006e+00, -8.1752e-01,  2.9479e+00,  1.0864e+00, -9.2259e-01,
        -1.9852e+00, -2.8639e-01, -2.3738e+00, -6.2922e-01,  5.8388e+00,
         2.3067e+00,  4.3364e-01,  1.0970e-01, -5.2616e+00,  7.7293e-01,
         8.4765e-02, -2.8276e+00, -4.1999e+00, -4.8197e-01,  5.3865e+00,
         8.5958e-01,  3.2799e+00, -3.1133e+00, -7.7238e+00, -3.7568e+00,
        -1.1839e+00,  2.5007e-01, -1.6103e+00, -1.3934e+00, -2.0833e+00,
        -1.8360e+00,  1.2523e+00,  9.8791e-01,  7.5022e-01, -2.1379e+00,
        -1.6345e+00,  1.3923e+00,  2.5625e-01,  2.7907e-01, -4.2855e+00,
        -8.3437e-01, -6.2937e-01, -1.8547e+00, -2.1039e+00, -1.5142e+00,
        -1.0608e+00,  5.4864e-01,  2.8565e-01, -2.1390e+00,  2.4338e+00,
        -1.4663e-01, -2.0827e+00, -2.2365e+00,  2.6851e+00,  4.3596e-01,
        -4.7974e+00,  2.6083e+00, -1.5956e+00,  2.9770e+00, -2.2052e+00,
         3.1116e+00, -7.0115e-02,  4.2987e+00, -7.5388e+00,  4.2928e+00,
         1.4942e+00,  1.0770e+00, -1.4224e+00, -1.7309e+00,  6.5508e-01,
        -2.9664e+00,  3.8263e-02, -2.5853e+00, -1.1647e+00,  1.8484e+00,
         1.0355e+00,  1.3857e+00, -1.0489e+00, -2.3583e+00, -1.6057e+00,
        -2.1337e-01,  2.7067e+00,  3.2351e+00, -5.3412e-01, -2.9348e+00,
         1.3224e+00, -1.2988e-01,  3.3599e+00,  6.5013e-01, -1.0580e+00,
        -1.9318e+00, -9.6753e-01, -2.1502e+00, -3.8610e-01, -2.7313e+00,
        -3.0223e+00, -4.2612e+00, -2.1287e+00, -8.6168e-01, -4.9741e-01,
         2.7295e+00, -2.6249e+00, -3.5098e+00,  1.0592e+00,  2.2172e+00,
         8.8661e-01, -9.5154e-01,  2.4566e+00,  2.4058e+00,  2.7128e+00,
         1.6064e+00,  1.8283e+00,  3.3478e-01,  1.8305e-02,  1.0540e-01,
        -8.8162e-02, -2.8001e-01,  4.6615e-01,  5.0469e-01,  1.0838e-01,
         2.2400e+00, -7.2314e-01,  4.0475e+00,  8.2682e-01, -3.3822e+00,
         2.3742e+00,  2.3397e-01, -3.6479e-01,  8.5489e-01, -8.8770e-02,
         2.0188e+00, -4.0500e-01,  3.9827e-03, -1.4556e+00, -1.8534e-02,
         1.3794e+00,  1.0649e+00,  1.1163e+00,  3.2428e+00,  7.9974e-01,
         3.9685e+00, -2.9442e+00,  2.3260e+00,  5.2698e-01, -1.4851e+00,
        -5.0036e-01, -3.9595e+00,  9.8554e-01,  1.1593e+00, -1.5564e+00,
        -3.0751e+00,  2.7534e+00, -8.1407e-01,  2.9439e+00, -1.2897e+00,
        -4.5910e+00, -5.8723e+00,  8.0740e-01, -9.2563e-01, -6.2436e-01,
         2.4276e+00,  2.6261e+00,  3.4360e-01,  3.1152e+00, -1.9517e+00,
        -4.0202e+00,  1.6946e-01,  6.9961e-01,  2.5553e-01, -8.8350e-01,
         5.6686e-01,  2.1979e-01,  1.2877e+00, -1.6343e+00, -2.4237e+00,
         4.7575e+00, -4.0750e+00, -3.3111e+00,  8.7511e-01,  1.5472e+00,
        -4.5886e+00, -1.1237e+00, -3.4605e+00, -5.9692e-01,  8.9146e-01,
        -3.9266e+00, -6.8140e-01,  4.8282e+00, -6.3292e-01, -1.2390e+00,
        -2.1494e+00, -1.2616e+00,  2.7960e+00,  3.2217e+00,  7.4517e-01,
        -4.9517e-01, -9.3936e-01,  4.0959e+00, -1.4306e+00,  4.2890e+00,
        -2.2572e+00,  1.3838e-01,  1.0659e+00,  2.2152e-02, -3.3050e-01,
         3.4299e+00,  1.3822e+00, -2.5829e-03, -2.5295e-01,  3.1208e+00,
         9.0848e-01,  1.7449e+00,  1.2360e+00, -1.8902e+00, -2.6985e-01,
        -5.6161e+00, -2.9945e+00,  1.4943e+00, -6.0805e-01, -3.7211e-01,
         8.5363e-01, -1.1552e+00,  6.1252e-01,  1.2447e+00, -2.2342e+00,
        -2.4655e-01,  5.4363e-01, -1.2968e+00,  8.8782e-01, -2.2069e+00,
        -3.2953e+00, -4.5223e+00, -4.9878e-01,  3.2428e+00,  4.8365e+00,
         1.6448e-01, -3.4509e+00, -8.6375e-01, -2.9713e+00, -4.6047e+00,
        -4.9947e+00,  1.6169e-01,  8.1716e-01,  2.7660e+00,  9.8179e-01,
         4.9957e+00,  5.8731e+00,  2.5173e+00, -1.1199e+00, -2.3273e+00,
         9.9096e-01,  7.3436e-01,  3.3479e+00,  7.3557e-02, -2.2690e+00,
        -9.5166e-01,  2.1957e+00,  1.7855e+00, -6.3630e-01,  1.5373e-01,
         1.7546e+00,  6.8578e-02, -2.5312e+00,  1.1080e+00, -4.1981e-01,
        -2.6162e-01, -2.0720e+00, -1.0951e+00,  5.9140e+00, -5.4861e-01,
        -1.8348e+00, -5.9821e-01, -3.1817e+00, -5.4379e+00,  4.4725e+00,
         1.1678e-01,  1.3043e+00, -8.9360e-01, -2.9246e+00, -3.2931e-01,
        -2.2694e+00,  2.7404e-01,  1.1578e+00, -2.1490e+00,  2.0129e+00,
        -1.3084e+00, -4.6732e+00, -1.4361e+00,  4.7127e-01, -3.5065e+00,
        -2.8956e+00, -4.6740e+00, -5.0242e+00,  2.9699e+00, -2.5551e-01,
        -3.6764e+00, -8.4838e-01,  6.6826e+00,  3.7995e-01, -1.7035e+00,
        -2.4916e+00, -1.7490e+00, -1.6112e+00,  2.5146e+00, -7.1872e-01,
        -7.2340e-01,  1.5300e+00, -4.2938e+00, -3.0210e+00, -1.5483e+00,
         1.8865e+00, -5.8611e-01, -1.9359e+00,  1.4760e+00,  2.9321e+00,
         2.6153e+00,  3.3761e+00, -1.9066e+00, -2.0667e+00, -1.1713e+00,
         1.7900e+00, -1.5815e+00,  5.0952e+00, -5.5074e+00, -1.4037e+00,
        -1.4085e+00, -8.4583e-01, -2.9505e+00, -2.2872e+00,  1.2177e+00,
        -2.4017e+00, -1.7644e+00,  1.5718e+00, -4.4771e-01, -4.7190e+00,
        -8.4897e-01, -2.5446e+00, -4.4814e-02,  3.3945e+00,  4.1612e+00,
         3.7899e-01,  1.6762e+00, -2.3045e+00, -5.0516e-01, -1.2359e+00,
         3.8352e-02, -1.4500e+00,  1.0122e+00,  7.8492e-01, -4.5139e+00,
         3.3298e+00,  8.1976e-01,  3.5268e+00,  4.2892e-01, -4.8064e+00,
        -1.1961e+00,  4.9921e+00,  6.4302e-01,  2.1983e-01,  1.6309e+00,
        -3.7030e+00,  4.3223e+00, -2.5828e+00,  2.6393e-01, -7.0066e-01,
         2.5115e+00, -1.6488e-02, -3.4455e-01,  2.7108e+00,  5.7557e+00,
        -5.0390e-01, -2.1874e+00, -1.0955e+00, -8.5281e-01,  2.2635e-01,
         1.4701e+00,  3.0311e+00,  1.7600e+00, -1.6189e+00,  1.2282e+00,
        -3.4296e+00,  5.0433e+00, -3.4669e+00,  7.4424e-01,  3.6893e+00,
         3.1238e+00,  1.5768e+00, -1.1698e-01,  4.5609e-01,  2.8041e+00,
        -5.6134e+00, -6.8249e-01,  5.4727e+00, -2.8018e+00,  3.1193e+00,
        -2.4636e+00,  8.4825e-01, -1.1246e+00,  5.5826e-01,  3.1397e+00,
         3.1459e+00, -1.6072e+00, -2.7410e-01,  1.1810e+00, -1.1234e+00,
         4.5494e+00, -2.4944e+00, -2.6709e-01,  1.2048e+00, -3.0583e+00,
        -5.2674e+00,  2.0782e-01,  4.2389e+00, -1.8220e+00, -1.0471e+00,
         3.0461e+00,  3.5071e+00,  3.6782e+00]
OPEN_RRB_LAST = [ 1.0365e-01, -7.4783e-01,  9.3665e-01,  3.2439e-01,  4.9723e-01,
         3.6663e-01,  1.4357e-01, -1.4869e-01, -4.6669e-01, -1.4290e-01,
         9.4400e-01, -1.9814e-01,  3.9144e-01, -3.7929e-01,  3.1146e-01,
        -2.1990e-01, -9.4850e-02,  2.6302e-01, -1.3530e-01,  4.8323e-01,
        -7.1792e-02, -2.4943e-01,  1.9236e-01,  4.9591e-01, -5.3086e-01,
        -3.5002e-02,  2.2033e-01,  4.0941e-01, -1.0935e-02, -7.1373e-02,
         5.4057e-01,  5.2236e-01, -5.2449e-02,  1.4620e+00, -6.8717e-01,
         6.0988e-01, -3.9382e-01,  3.2444e-01,  9.8192e-03, -6.9020e-02,
        -2.1423e-01, -3.9565e-01,  3.4436e-01,  1.8532e-01, -4.9316e-01,
         1.3690e-01, -1.9913e-04,  2.3613e-01,  7.6406e-01,  1.0248e-01,
        -3.9601e-01,  3.9371e-01, -3.2308e-01,  1.8160e-01, -2.7912e-01,
         6.5612e-01,  5.7624e-01, -8.3155e-01, -5.7379e-01, -1.9464e-01,
         9.9856e-02, -3.2577e-01, -1.0841e-01, -4.1239e-01, -1.2485e-01,
         1.6327e-01, -1.0347e+00,  2.8113e-03,  8.4598e-02,  7.5080e-01,
         4.5898e-01, -1.1492e+00,  6.3893e-01, -1.8796e-01, -1.4526e-01,
         2.8334e-02,  4.4194e-01, -5.7043e-01, -9.9860e-01, -2.8140e-02,
        -7.8886e-01,  2.0656e-01, -5.7759e-01,  6.8833e-01, -2.6572e-01,
        -5.6580e-02,  5.5269e-02,  6.9745e-01,  5.4351e-01, -8.0126e-01,
        -3.7014e-01, -4.8663e-02,  7.8076e-01,  5.5856e-01, -5.1347e-01,
         8.0955e-01, -3.4079e-02,  1.5674e-01, -7.8887e-01, -1.9931e-01,
        -1.6950e-01,  3.6221e-01, -6.3277e-01,  1.7554e-01,  3.0830e-02,
         7.5856e-01, -1.2175e-01,  5.6682e-01, -1.4118e-01,  1.0494e+00,
         3.3851e-01,  8.8875e-01, -2.2238e-01, -2.9502e-01, -2.6669e-01,
        -1.0853e-01, -4.2845e-01, -5.4405e-01, -2.5840e-01, -4.4615e-01,
         6.9718e-01, -1.1655e-01,  4.6728e-01, -9.6343e-01,  2.6442e-02,
        -5.7084e-02,  3.4687e-01, -4.2968e-01,  8.8477e-01,  6.5179e-01,
        -1.8887e-01, -8.0518e-02, -2.4879e-01, -3.1609e-01,  1.1207e-02,
        -3.9782e-01,  4.6073e-01,  3.8509e-01, -2.2472e-01, -4.5532e-01,
         6.6346e-01, -8.2941e-02, -1.3842e-01, -2.3361e-01, -5.4671e-01,
        -1.1899e-01, -1.1952e+00, -3.2272e-01,  9.6905e-01, -3.4139e-01,
         1.0506e-01, -7.8428e-01,  5.3959e-01, -5.8281e-03, -2.7850e-01,
        -9.7766e-02,  3.8287e-01, -3.0091e-02,  2.9639e-03,  2.5934e-01,
        -3.7045e-01,  1.0197e-01,  1.2707e-01,  1.2572e+00, -4.1577e-01,
        -2.7640e-01,  9.4881e-02, -5.3652e-01, -4.0591e-01,  1.3974e-01,
         1.7690e-01, -4.0292e-01, -3.8688e-01, -7.3708e-01, -4.2237e-01,
        -1.8390e-01,  1.0531e-01, -2.3388e-01,  5.9681e-01,  6.9245e-01,
        -2.5603e-01,  2.3463e-01,  4.8941e-01,  4.9833e-01,  5.7491e-02,
         2.1067e-01,  4.9384e-01,  6.1168e-02, -9.7420e-01, -1.6601e-01,
         3.7634e-01,  7.9536e-01, -5.6325e-01,  4.4768e-01,  2.2350e-01,
         4.1127e-01,  1.7483e-01,  1.7219e-01, -4.6597e-01,  2.7700e-01,
         2.2839e-01,  5.1254e-01,  9.4775e-02, -1.7013e-01, -3.2774e-01,
         6.8209e-01,  4.8684e-01, -1.3495e+00, -9.7174e-03,  5.3377e-01,
         5.9126e-01,  2.7360e-01,  2.3529e-01,  4.5999e-01, -3.4409e-01,
        -3.5647e-01,  4.1396e-01,  2.3978e-01,  1.2781e-01, -1.3578e-01,
         6.1561e-03,  2.4846e-01,  1.8918e-02,  5.7807e-01, -4.1311e-01,
        -8.8627e-02, -1.3018e-01,  1.0618e-01,  5.4404e-01, -2.6999e-02,
        -4.0083e-01, -4.2145e-01,  9.4743e-02,  7.9682e-02, -1.1335e-01,
        -3.7801e-01,  6.5928e-01, -8.2823e-01, -1.1849e-01, -3.7714e-01,
        -2.3349e-01, -3.5073e-01, -7.8667e-01, -1.1000e-01,  1.5563e-01,
         7.5071e-01, -6.9067e-01, -3.8654e-02, -2.1466e-01, -7.0673e-01,
         3.1168e-01,  8.2956e-01,  9.1487e-01,  6.5688e-01, -5.6746e-01,
         2.4602e-01, -3.5651e-01,  5.5334e-01,  5.3419e-01, -3.5518e-01,
        -2.5946e-01,  1.0627e-01, -1.2682e-01, -5.5969e-01,  1.0440e-01,
         1.1675e-01,  2.8730e-01,  9.1201e-02,  5.6984e-02, -3.0014e-01,
        -6.3370e-02,  9.5084e-01, -1.4519e-01, -1.4008e-01,  8.5367e-02,
         6.2408e-02, -7.3057e-02,  5.1392e-01, -6.8848e-02,  1.4333e-01,
         3.9470e-01, -3.7016e-01,  3.9119e-01,  1.0682e-02, -6.5319e-01,
         1.9646e-01,  8.3921e-01, -1.5302e-01,  5.9574e-01, -1.7874e-01,
         6.5022e-01, -2.7319e-01,  6.3231e-01,  6.1883e-01, -4.1060e-01,
        -6.7091e-01, -6.7433e-02, -1.9642e-01,  6.1116e-01, -3.5384e-02,
        -5.1292e-01, -1.0077e-01, -7.5029e-01,  9.7154e-03, -2.2821e-01,
         1.6881e-01,  1.1037e-01,  2.5751e-01,  2.6503e-01, -1.1701e-01,
         7.2083e-02, -1.1144e-01,  7.1838e-02,  2.8944e-01, -3.9949e-01,
        -1.6591e-01, -9.4699e-02, -1.1799e-01, -4.5541e-01, -4.3552e-02,
         5.4674e-03,  3.2587e-01,  3.2795e-01, -4.0837e-01, -2.0491e-01,
         9.3317e-01, -6.2723e-01, -1.5382e-01,  5.2588e-01, -2.2235e-01,
         7.5206e-01,  1.4638e-01, -3.1967e-02,  1.1166e-01, -3.8139e-01,
         1.9874e-01, -6.2248e-01, -7.3644e-02, -4.2669e-01, -2.5668e-02,
         2.4591e-01, -7.4222e-01,  9.3953e-02, -6.6572e-01, -4.3242e-01,
         1.5913e-01,  5.8733e-02, -1.4853e-01, -2.7748e-02, -5.5154e-01,
         4.2847e-01, -3.7850e-01,  6.6468e-01,  6.4678e-01, -2.8293e-01,
        -5.5192e-01, -6.9695e-01, -2.2217e-01,  6.8438e-02,  1.1511e+00,
        -1.0299e-01,  7.2021e-01, -1.6451e-02, -6.8393e-01,  8.9269e-02,
         5.9027e-02, -1.3645e-01, -6.7200e-01,  4.5364e-01,  1.3602e+00,
         4.6603e-01,  1.4192e+00, -2.7806e-01, -1.8429e+00, -9.2860e-01,
        -2.5420e-01, -2.8399e-01, -5.8520e-01, -9.4195e-01, -5.7084e-01,
         2.3376e-02,  6.5897e-01, -8.8934e-02,  2.4161e-01, -4.3088e-01,
        -1.8835e-01, -1.1849e-01, -2.6572e-02,  1.6519e-01, -4.8841e-01,
        -1.7578e-01, -3.3756e-01, -3.8168e-01, -1.6967e-01,  2.9099e-01,
         1.3961e-01,  9.5944e-03, -1.6237e-01, -3.8869e-01,  4.9858e-01,
         4.4544e-01, -1.6081e-01, -1.7373e-01,  1.1246e+00,  4.6364e-01,
         2.3313e-01,  7.8622e-01, -2.4967e-02,  1.4718e-01, -1.0880e-01,
         2.0592e-01, -1.1321e-01,  5.4090e-01, -1.2163e+00,  4.8829e-01,
         5.8470e-01, -5.3015e-02, -1.2153e-01,  1.1142e-02,  4.5066e-01,
         9.5241e-02,  7.2417e-02, -1.0638e+00, -6.5979e-01,  3.1115e-01,
         1.7286e-01,  3.2117e-01, -1.4248e-01, -4.5441e-01, -1.4842e-01,
        -4.3196e-01,  1.4365e-01,  7.6187e-01, -3.4250e-01, -2.4010e-01,
         1.8263e-01, -4.7700e-02,  1.4109e-01, -2.3957e-01, -2.3791e-01,
         2.3811e-01, -5.2343e-02, -2.5188e-01, -4.5559e-02, -4.3808e-01,
        -1.0484e-01, -7.7214e-01, -8.3102e-01, -1.5161e-01,  3.8550e-01,
         4.8133e-01, -1.0613e+00, -4.0501e-02,  2.6789e-01,  1.2060e-01,
        -1.5685e-01, -1.2723e-01,  2.1863e-01,  1.8977e-01,  3.4782e-01,
         2.3017e-01, -6.6134e-02,  8.7352e-01,  3.6614e-01, -1.5561e-01,
        -2.5307e-01, -4.6811e-01, -1.2030e-02,  3.3225e-02, -4.1760e-02,
         2.9386e-01,  4.3911e-02,  6.2072e-01,  3.0203e-01, -5.4728e-01,
         3.9339e-01,  6.3395e-02, -1.9463e-01,  2.3597e-01, -1.1507e-01,
         3.0239e-01, -1.1174e-01,  2.4491e-01, -2.4887e-01,  7.7141e-03,
         3.1046e-01,  5.1388e-01, -1.5447e-01,  3.9649e-01,  7.9665e-02,
         2.7611e-01, -3.2586e-01,  2.6310e-01, -1.9373e-01,  2.0852e-01,
        -3.2194e-01,  1.0875e-01, -7.0922e-02,  3.1210e-01, -6.0899e-02,
        -6.6031e-01,  6.7185e-01,  1.3408e-01,  6.3850e-01,  2.4924e-02,
        -6.8106e-01, -9.5427e-01,  5.3248e-01, -2.4053e-01, -3.8830e-02,
         4.4584e-01,  3.9128e-02,  9.9444e-02,  4.3127e-01, -4.5121e-01,
        -4.0232e-01, -5.4596e-02, -4.9673e-01,  5.7345e-02,  3.1364e-02,
         1.5540e-01,  4.2378e-01,  3.4139e-01, -4.6864e-01,  1.3150e-01,
         4.4677e-01, -8.6323e-01, -1.1020e+00,  5.8883e-02,  5.1443e-01,
        -8.9286e-01,  1.4145e-01, -3.4992e-01, -2.3129e-01,  2.3767e-01,
        -8.8673e-01, -3.0125e-01,  9.6300e-01,  9.4404e-02, -2.3188e-02,
        -5.5176e-01, -1.8581e-01,  4.1847e-01,  8.1360e-01,  2.5895e-01,
         1.7466e-01,  8.7459e-02,  4.6485e-01, -6.8978e-01,  3.0296e-01,
         2.9033e-02,  1.3634e-01,  2.5051e-01, -1.7784e-01,  6.8936e-02,
         5.6367e-01, -6.6914e-02, -2.8363e-01, -4.8898e-03,  5.2811e-01,
         4.0214e-02,  5.3867e-01,  4.4522e-03, -1.7530e-02, -2.2706e-02,
        -7.1173e-01, -7.9054e-01,  3.4663e-01, -1.7235e-01, -1.3065e-01,
        -3.4894e-02, -1.9603e-01,  1.0267e-01,  3.9316e-01, -6.4725e-02,
         4.3438e-01,  4.3211e-01, -2.7556e-01,  5.8721e-01, -2.3901e-01,
        -3.7457e-01, -7.1638e-01,  3.1438e-01,  1.9205e-01,  6.0934e-02,
        -2.7514e-02, -8.0687e-03,  1.3432e-01, -7.9072e-01, -2.0314e-01,
        -7.3817e-01,  4.0859e-01,  4.7440e-02,  1.0095e+00,  6.6405e-01,
         7.6226e-01,  1.2572e+00,  2.7513e-01,  1.1098e-01, -1.8116e-01,
         9.7079e-02, -5.5560e-02,  1.0527e+00,  1.9267e-01, -6.4359e-01,
         5.6128e-02,  2.7297e-01,  6.2030e-01, -2.9154e-01, -4.2745e-01,
         1.0432e-01, -1.0578e-01, -3.1608e-01,  1.2947e-01, -2.7283e-01,
        -1.8133e-01, -7.8151e-01,  5.7672e-02,  6.9269e-01,  2.1935e-01,
         1.8506e-01,  6.9335e-02, -4.2656e-01, -1.3193e+00,  4.8766e-01,
         9.7091e-02,  1.7089e-01, -1.3492e-01, -3.5378e-01, -4.7655e-01,
        -2.0810e-01, -2.0391e-01,  3.3199e-01, -4.4800e-01,  3.0997e-01,
        -3.1647e-02, -5.7548e-01, -5.4101e-01, -1.3303e-01, -2.9738e-01,
         5.8022e-02, -4.9022e-01, -2.6738e-01,  5.7194e-01, -4.2005e-02,
        -7.7672e-01, -4.7595e-01,  1.1163e+00,  3.1100e-01, -3.0948e-01,
        -2.3230e-01, -2.3190e-01, -1.1508e-01,  1.5872e-02, -2.7217e-01,
         3.6355e-01,  5.0144e-01, -1.0548e+00, -3.0621e-01, -1.0390e-01,
         1.0857e-01, -1.7916e-01, -2.9189e-01,  1.5635e-01,  4.0378e-01,
         6.6397e-01,  7.6318e-02, -7.4044e-02, -6.5994e-02, -3.7265e-01,
         2.1574e-01, -2.6545e-01,  5.1659e-01, -9.8556e-01, -7.9309e-02,
        -2.6739e-01,  3.0165e-01, -3.3363e-01, -1.1300e-01,  3.9408e-01,
        -6.6558e-01, -4.4331e-01,  9.2266e-01, -2.6484e-01, -1.0467e+00,
        -1.4136e-01, -3.9131e-01, -1.9172e-01,  6.7268e-01,  5.7985e-01,
         3.4161e-01,  1.7928e-01, -3.9354e-01, -2.9958e-01, -1.7571e-01,
         9.4538e-02,  2.6963e-01,  2.0905e-01,  6.5740e-04, -1.2664e+00,
         3.8553e-01, -7.0593e-01,  2.1626e-01, -8.4362e-02, -3.0651e-01,
         7.7027e-02,  4.7415e-01,  4.4128e-01, -1.8982e-01,  2.9086e-01,
        -1.9715e-01,  3.3430e-01, -5.6510e-01,  1.8279e-01, -2.0413e-01,
         2.0688e-01, -4.7930e-02,  1.3749e-02,  3.6015e-01,  1.2256e+00,
        -2.5662e-01, -9.6032e-02, -7.2085e-01, -2.1074e-01, -2.4079e-01,
         3.2632e-01,  5.4665e-01,  4.0332e-01, -1.4142e-01,  3.0955e-01,
        -7.6975e-01, -1.6560e+00, -2.4224e-01, -1.7456e-01,  4.8834e-01,
         2.7911e-01, -7.1738e-02,  2.7727e-01, -3.7028e-02,  2.7066e-01,
        -1.3751e+00,  9.5069e-02,  4.2126e-01, -8.7746e-01,  4.7807e-01,
        -1.7019e-01,  6.3676e-02, -6.7326e-01,  2.9299e-02,  9.4774e-01,
         5.8524e-01, -9.1697e-03, -1.0284e-01,  7.9394e-02, -3.4489e-01,
         4.2042e-01, -2.6035e-01, -2.6787e-01,  3.1534e-01, -2.8313e-01,
        -1.1374e+00, -5.2640e-01,  4.7918e-01, -3.8222e-01, -8.6918e-02,
         2.1516e-01,  5.1739e-01,  4.6561e-01]

def create_out_embeddings(sentences, lamda=False):
    #tokenize tha sentence 
    tokenized = TOKENIZER(sentences, 
                          return_tensors="pt", #return torch tensors
                          padding=True, #pad to max length in batch
                          truncation=True) #truncate to max model length
    #search for the tokenized id of λ
    input_ids = tokenized["input_ids"]
    lambda_id = TOKENIZER.convert_tokens_to_ids("λ")
    app_id = TOKENIZER.convert_tokens_to_ids("(")

    if lamda:
        #get all the indices where the lambda token is presen
        lambda_index_mask = (input_ids == lambda_id)
        app_index_mask = (input_ids == app_id)
        var_index_mask = (input_ids == TOKENIZER.convert_tokens_to_ids("np"))
        var_index_mask = var_index_mask | (input_ids == TOKENIZER.convert_tokens_to_ids("##np"))
        var_index_mask = (input_ids == TOKENIZER.convert_tokens_to_ids("s"))
        var_index_mask = var_index_mask | (input_ids == TOKENIZER.convert_tokens_to_ids("##s"))
        var_index_mask = (input_ids == TOKENIZER.convert_tokens_to_ids("pp"))
        var_index_mask = var_index_mask | (input_ids == TOKENIZER.convert_tokens_to_ids("##pp"))
        var_index_mask = (input_ids == TOKENIZER.convert_tokens_to_ids("n"))
        var_index_mask = var_index_mask | (input_ids == TOKENIZER.convert_tokens_to_ids("##n"))
        #shift the 1s in var_index_mask to the right by 1
        var_index_mask_underscore = torch.roll(var_index_mask, shifts=1, dims=1)
        #roll again
        var_index_mask_no = torch.roll(var_index_mask_underscore, shifts=1, dims=1)
        var_index_mask_no = torch.where(var_index_mask_no == 1, input_ids, 0) #make the variable numbers in the mask
        #to ensure uniqueness batch wise we add a constant along the batch dimension
        var_index_mask_no_new = var_index_mask_no + torch.arange(0, var_index_mask_no.size(0)).reshape(var_index_mask_no.size(0), 1)
        #everything that isnt var no shud be zero still
        var_index_mask_no_new[var_index_mask_no == 0] = 0
        var_index_mask_no = var_index_mask_no_new

        _, var_index_mask_no = torch.unique(var_index_mask_no, return_inverse=True) # contiguous naming


    # the mask of tokens belonging to the variable name, both next to the lambda and within an expression
    pad_mask = (input_ids == TOKENIZER.pad_token_id)
    return (tokenized, lambda_index_mask, app_index_mask, var_index_mask, var_index_mask_underscore, var_index_mask_no, pad_mask) if lamda else (tokenized, pad_mask)

def get_bert_emb(tokenized_sents, return_last=True):
    #get the bert embeddings
    global BERT_MODEL
    BERT_MODEL = BERT_MODEL
    with torch.no_grad():
        outputs = BERT_MODEL(**tokenized_sents, output_hidden_states=True)
        hidden_states = outputs.hidden_states[-4:]
        #sum the last four hidden states
        embs = torch.stack(hidden_states, dim=0).sum(dim=0)
    return embs.detach() if not return_last else (embs.detach(), hidden_states[-1].detach())# no grads through bert ever

def process_bert_lambda(tokenized_sents, lambda_index_mask, app_index_mask, var_index_mask, lambda_norm=True, var_norm=True):
    assert lambda_norm if var_norm else True, "norm_lambda cant be off and norm_var be on"
    # global BIG_VAR_EMBS
    #get the bert embeddings
    var_index_mask, var_index_mask_underscore, var_index_mask_no, pad_mask = var_index_mask
    embs = get_bert_emb(tokenized_sents)
    #time to mask out the variables
    if var_norm: 
        embs[var_index_mask | var_index_mask_underscore | pad_mask] = torch.zeros_like(embs[0, 0, :]) # also make hte pad embeddings 0
        mask_sort = torch.argsort((var_index_mask | var_index_mask_underscore).to(torch.uint8), stable=True) #move the embeddiungs to the end
        
        # rearrange everything
        embs = torch.gather(embs, -1, mask_sort.unsqueeze(-1).expand(-1, -1, embs.size(-1)))  # all the var names and the underscores have been moveed to the end
        lambda_index_mask = torch.gather(lambda_index_mask, -1, mask_sort)
        var_index_mask_no = torch.gather(var_index_mask_no, -1, mask_sort)
        app_index_mask = torch.gather(app_index_mask, -1, mask_sort)  
        var_index_mask = torch.gather(var_index_mask, -1, mask_sort)
        var_index_mask_underscore = torch.gather(var_index_mask_underscore, -1, mask_sort)
        pad_mask = torch.gather(pad_mask, -1, mask_sort) 
        pad_mask = pad_mask | var_index_mask | var_index_mask_underscore #extend the pad mask
        
    #     #now we have the var_numbers which we need to uniq-ify
    #     uniques, indices = torch.unique(var_index_mask_no.reshape(-1), return_inverse=True, sorted=True)
    #     # mapping = torch.arange(1, len(uniques) + 1, dtype=torch.int64)
    #     # new_var_no_index = mapping[indices]
    #     # new_var_no_index = new_var_no_index.reshape(var_index_mask_no.shape)
    #     # embs[var_index_mask_no != 0] = BIG_VAR_EMBS[var_index_mask_no != 0]

    #     # embs[var_index_mask_no != 0] = BIG_VAR_EMBS[indices != 0]
    #     #one time operation, perform on CPU
    #     # indices = indices.to(torch.device('cpu'))
    #     # var_index_mask_no = var_index_mask_no.to(torch.device('cpu'))
    #     embs = embs.index_put((var_index_mask_no != 0, ), BIG_VAR_EMBS[indices[indices != 0]], accumulate=True)
    if lambda_norm:
        embs[lambda_index_mask] = torch.tensor(LAMBDA, device=embs.device, dtype=embs.dtype)#torch.ones((embs.shape[-1], ), device=embs.device, dtype=embs.dtype)

    return embs, lambda_index_mask, app_index_mask, var_index_mask, var_index_mask_underscore, var_index_mask_no, pad_mask

def create_out_tensor(sentence, lambda_term):
    # group the offsets into a word dictionary
    # for example {(0, 8): [(0, 2), (2, 6), (6, 8)]}

    # create a map from word in lambda term to original sentence as such:
    # {(3, 6): (8, 11)}

    # then for every offset that is not in the map, tokenize it as a character or word as suitable
    # for every offset in lambda term that is in the map, replace w the tokens in the corresponding list as value in the first map

    # making the first map
    # t = TreebankWordTokenizer()
    # words = t.tokenize(sentence)
    words = " ".join(sentence).replace("...}"," ...}").replace("{..","{. .").replace("NP.","NP .").replace("NP—","NP —").replace(",}"," ,}").\
    replace("'re"," 're").replace("'s"," 's").replace("'ve}"," 've}").replace("!}"," !}").replace("?}"," ?}").replace("n't"," n't").\
    replace("'m}"," 'm}").replace("{. ..","{...").replace("{——}","{— —}").replace("{--—}","{- -—}").replace("St.", "St").split()
    
    words = [word[:-1].strip("\u200e") for i, word in enumerate(words) if i % 2 != 0] # -1 to get rid of the } at the end. sentences in PTB tokenized form with POS tagging - {Tag word}

    ind_letters = set()

    for i, word in enumerate(words):
        if "." in word and len(list(set(word))) != 1: words[i] = words[i].replace(".", "")
        if len(word) == 1 and word.isalpha(): ind_letters.add(i)
    
    replacement = "J"
    while replacement in words:
        replacement = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[random.randint(0, 25)]

    tokens = TOKENIZER(" ".join(words), add_special_tokens=True, return_tensors="pt", return_offsets_mapping=True)
    word_mapping = tokens.words()
    word_mapping[0] = -1
    word_mapping[-1] = -1
    
    offset_mapping = tokens.offset_mapping[0]
    #create word mapping from offset_mapping:
    new_word_mapping = []
    acc = ""
    how_many = 0
    prev_end =1000

    # print(lambda_term)
    repl_words = words.copy()
    for i, (start, end) in enumerate(offset_mapping):
        if start ==0 and end == 0: new_word_mapping.append(-1)
        else: 
            if start > prev_end and acc in words:
                new_word_mapping.extend([words.index(acc)]*how_many)
                words[words.index(acc)] = replacement * len(acc)
                acc = ""
                how_many=0   
            acc += " ".join(words)[start:end]
            how_many +=1
            prev_end = end
    #add in the last one
    new_word_mapping.extend([words.index(acc)]*how_many)

    words = repl_words
    
    # print(TOKENIZER.convert_ids_to_tokens(tokens.input_ids[0])[new_word_mapping.index(15)])
    # print(" ".join(words))
    # print(TOKENIZER.convert_ids_to_tokens(tokens.input_ids[0]))
    # print(new_word_mapping)
    # print(word_mapping)
    # print(len(word_mapping), len(new_word_mapping))
    # print(tokens.input_ids[0])
    word_mapping = new_word_mapping 
    del tokens["offset_mapping"]

    # print(words)

    #get the bert embedding:
    representations, last_representations = get_bert_emb(tokens)

    #ptb tokenize the lambda term 
    lambda_term_list = []
    acc = ""

    weird_dots = re.findall(r"<w_\d+>", lambda_term)
    for i, dot in enumerate(weird_dots):
        lambda_term = lambda_term.replace(dot, f"..._{i+10000}")

    for char in lambda_term:
        if char in "( )":
            if acc != "":
                lambda_term_list.append(acc)
                acc = ""
            if char != " ": lambda_term_list.append(char)
        else: 
            acc += char
    lambda_term_list = [w.replace("\u200e", "") for w in lambda_term_list]
    replace_copy = lambda_term_list.copy()
    term_to_word_index = {}
    #at this point we have replace copy like: ['(', '(', 'is_15', '(', 'an_16', '(', 'American_17', ...]

    #first compile a list of variable positions:
    var_logs = []
    lambda_pattern = re.compile(r"λ\w+_\d+\.")
    for i, element in enumerate(lambda_term_list):
        if lambda_pattern.match(element)is not None:
            var_logs.append(element[1:-1])

    for w, word in enumerate(words):
        #find if this constitutes an entity in the lambda term
        #entities are of the form words_dddd
        if word == "(": word = "LRB"
        elif word == ")": word = "RRB"
        elif word == "[": word = "LSB"
        elif word == "]": word = "RSB"
        elif word == "{": word = "LCB"
        elif word == "}": word = "RCB"

        if "λ" in word: word = word.replace("λ", "")
        if word not in lambda_term: continue
        #traverse the lambda_term 
        min_indx, min_no = 500000, 500000
        for i, term in enumerate(lambda_term_list):
            if re.findall(r"_\d+", term) and term[: term.rfind(re.findall(r"_\d+", term)[0])] == word and term not in var_logs and "_" in term:
                no = int(term[term.rfind(re.findall(r"_\d+", term)[0])+1:])
                if no < min_no:
                    min_no = no
                    min_indx = i
        if min_indx == 500000: continue
        #replace with something random
        lambda_term_list[min_indx] = replacement*len(word)
        term_to_word_index[min_indx] = w # index in the term to the index in the word list 
    lambda_term_list = replace_copy

    lambda_term_embedding = []
    lambda_term_embedding_last = []
    lambda_term_tokens = []
    var_mask, lambda_mask, app_mask = [], [], []

    lambda_term_tokens_temp = []

 
    var_pattern1 = re.compile(r"S_\d+")
    var_pattern2 = re.compile(r"NP_\d+")
    var_pattern3 = re.compile(r"N_\d+")
    var_pattern4 = re.compile(r"PP_\d+")
    entity_pattern = re.compile(r".*_\d+")

    var_logs = []
    for i, element in enumerate(lambda_term_list):
        if element == "(" or element == ")":
            lambda_term_embedding.append("loo" if element == ")" else OPEN_RRB)
            lambda_term_embedding_last.append("loo" if element == ")" else OPEN_RRB)
            app_mask.append(1)
            lambda_mask.append(0)
            var_mask.append(0)
            lambda_term_tokens.append(-1)
            lambda_term_tokens_temp.append(113)
        elif lambda_pattern.match(element)is not None:
            lambda_term_embedding.append(LAMBDA)
            lambda_term_embedding_last.append(LAMBDA)
            var_mask.append(0)
            lambda_mask.append(1)
            app_mask.append(0)
            lambda_term_tokens.append(-1)
            lambda_term_tokens_temp.append(475)

            lambda_term_embedding.append(torch.rand((768,)))
            lambda_term_embedding_last.append(torch.rand((768,)))
            var_logs.append(element[1:-1])
            lambda_mask.append(0)
            var_mask.append(len(var_logs))
            app_mask.append(0)
            lambda_term_tokens.append(-1)
            lambda_term_tokens_temp.append(-1*len(var_logs))
        elif (var_pattern1.match(element) is not None or var_pattern2.match(element) is not None or var_pattern3.match(element) is not None or var_pattern4.match(element) is not None) and element in var_logs:
            lambda_term_embedding.append(torch.rand((768,)).tolist())
            lambda_term_embedding_last.append(torch.rand((768,)).tolist())
            lambda_mask.append(0)
            var_mask.append(var_logs.index(element)+1)
            app_mask.append(0)
            lambda_term_tokens.append(-1)
            lambda_term_tokens_temp.append(-1*(var_logs.index(element)+1))
        else:
            assert entity_pattern.match(element), "Invalid lambda term ?? " + element
            # print(f"masking {term_to_word_index[i]}", torch.tensor(word_mapping) == term_to_word_index[i])
            counts = torch.count_nonzero(torch.tensor(word_mapping) == term_to_word_index[i])
            lambda_term_embedding.extend(representations.squeeze(0)[torch.tensor(word_mapping) == term_to_word_index[i]])
            lambda_term_embedding_last.extend(last_representations.squeeze(0)[torch.tensor(word_mapping) == term_to_word_index[i]])
            lambda_term_tokens.extend(tokens.input_ids[0][torch.tensor(word_mapping) == term_to_word_index[i]].tolist())

            lambda_mask.extend([0]*counts)
            var_mask.extend([0]*counts)
            app_mask.extend([0]*counts)

            lambda_term_tokens_temp.extend(tokens.input_ids[0][torch.tensor(word_mapping) == term_to_word_index[i]].tolist())

        assert len(var_mask) == len(lambda_mask) == len(lambda_term_embedding) == len(app_mask) == len(lambda_term_tokens), f"{len(var_mask)} {len(lambda_mask)} {len(app_mask)} {len(lambda_term_embedding)} {len(lambda_term_tokens)}"

    ### For debugging and sanity checking 
    # temp_tokens = [TOKENIZER.convert_ids_to_tokens(101 if token < 0 else token) for token in lambda_term_tokens_temp]
    # temp_temp_vars = []
    # for i, token in enumerate(lambda_term_tokens_temp):
    #     if (i > 0 and token > 0) or i == 0: continue
    #     elif token not in temp_temp_vars: 
    #         temp_temp_vars.append(token)
    #         temp_tokens[i] = (f"NP_{len(temp_temp_vars)}")
    #     else:
    #         temp_tokens[i] = (f"NP_{temp_temp_vars.index(token)+1}")
    return representations, torch.tensor(lambda_term_embedding), torch.tensor(lambda_term_embedding_last),lambda_term_tokens, var_mask, lambda_mask, app_mask


if __name__ == "__main__":
    import pandas as pd
    import os
    from tqdm import tqdm
    df = pd.read_csv("data/input_sentences.csv", header=None)
    sentences = len(df)     

    #8147 bad - devanagiri script

    #choose 10 random indices from 0 to range(sentences)
    indices = random.sample(range(sentences), 10) #-- debugging

    for i in tqdm(range(sentences)):
    # for i in indices:
        # error here: i+9 + 56+75+477+25, i+9 + 56+75+477+26+128, i+9 + 56+75+477+26+129+278, i+9 + 56+75+477+26+129+279+111+724, i+9 + 56+75+477+26+129+279+111+725+482, i+9 + 56+75+477+26+129+279+111+725+483+6606+3757, i+9 + 56+75+477+26+129+279+111+725+483+6606+3757+157, i+9 + 56+75+477+26+129+279+111+725+483+6606+3758+158+5809, i+9 + 56+75+477+26+129+279+111+725+483+6606+3758+158+5809+4, i+9 + 56+75+477+26+129+279+111+725+483+6606+3758+158+5809+4+2113, i+9 + 56+75+477+26+129+279+111+725+483+6606+3758+158+5810+5+2114 + 2626,i+9 + 56+75+477+26+129+279+111+725+483+6606+3758+158+5810+5+2114 + 2626 + 1396,i+9 + 56+75+477+26+129+279+111+725+483+6606+3758+158+5810+5+2114+2627+1398+200, i+9 + 56+75+477+26+129+279+111+725+483+6606+3758+158+5810+5+2114+2627+1398+200+3440, +4453, +28,+10447, +5700
        gen_sent = eval(df.iloc[i, 1])

        path = df.iloc[i, 2]
        path = "/w/150/lambda_squad/lambdaBERT/data/" + path[len("lambdaBERT/data/"):]
        with open(path, 'r') as f:
            lambda_terms = f.readlines()[0].strip()
        lambda_terms = lambda_terms.replace(")", "")
        sent_emb, target_emb, target_emb_last, target_tokens, var_mask, lambda_mask, app_mask = create_out_tensor(gen_sent, lambda_terms)

        # if os.path.exists(f"/w/150/lambda_squad/{df.iloc[i, 2][:-4]}.pt"): 
        #     #delete it
        #     os.remove(f"/w/150/lambda_squad/{df.iloc[i, 2][:-4]}.pt")
        # torch.save((sent_emb, target_emb, target_emb_last, target_tokens, var_mask, lambda_mask, app_mask), f"/w/150/lambda_squad/{df.iloc[i, 2][:-4]}.pt")
        
    # for i in [67254, 57102, 40593, 43650]:
    #     gen_sent = eval(df.iloc[i, 1])
    #     words = " ".join(gen_sent).replace("...}"," ...}").replace("{..","{. .").replace("NP.","NP .").replace("NP—","NP —").replace(",}"," ,}").\
    # replace("'re"," 're").replace("'s"," 's").replace("'ve}"," 've}").replace("!}"," !}").replace("?}"," ?}").replace("n't"," n't").\
    # replace("'m}"," 'm}").replace("{. ..","{...").replace("{——}","{— —}").replace("{--—}","{- -—}").replace("St.", "St").split()
    #     words = [word[:-1] for i, word in enumerate(words) if i % 2 != 0]

    #     tokens = TOKENIZER(" ".join(words), add_special_tokens=True, return_tensors="pt")
    #     representations = get_bert_emb(tokens)

    #     path = df.iloc[i, 2]
    #     sent_emb = representations
    #     target_emb = representations[0, 1, :].reshape((1, 1, 768))
    #     var_mask = [0]
    #     lambda_mask = [0]
    #     app_mask = [0]
    #     # target_emb = representations[]
    #     torch.save((sent_emb, target_emb, var_mask, lambda_mask, app_mask), f"/w/150/lambda_squad/{df.iloc[i, 2][:-4]}.pt")






        
        
        
        
        
    